@using ProfitWise.Data.Model.Preferences
@using Push.Foundation.Web.Json
@model ProfitWise.Data.Model.Shop.PwShop
@{
    Layout = "~/Views/Shared/_AuthenticatedLayout.cshtml";
}
@Html.Partial("~/Views/SharedTemplates/_DatePickerWidget.cshtml")
@Html.Partial("~/Views/SharedTemplates/_DateRangePickerWidget.cshtml")
@Html.Partial("~/Views/SharedTemplates/_NumberEditorWidget.cshtml")

<style>
    .vert-spacer { height:65px; }
    .preference-control-cell { padding-left:40px; }
</style>

<script type="text/html" id="Main-Template">
    <div class="std-outer-padding">
        <div class="standard-header-sleeve" style="height: 150px;">
            <!-- This element will track with the scrollbar via JavaScript wiring to onscroll-->
            <div class="standard-header top-border-facade std-inner-padding">
                <div class="row">
                    <div class="col-xs-12" style="padding-top:20px;">
                        <h2 styl="font-weight:700;">Profitwise &gt; Edit Preferences</h2>
                    </div>

                </div>
            </div>
        </div>
    </div>

    <div class="page-content-sleeve">
        <div class="page-content std-inner-padding" style="min-height: 400px; padding-bottom: 100px;">
            <div data-bind="template: { name: 'Page-Content' }"></div>
        </div>
    </div>
</script>

<script type="text/html" id="Page-Content">
    <div class="row">
        <div class="col-xs-12">
            <div data-bind="template: { 
                                name: 'Date-Range-Picker-Widget-2', 
                                data: { daterange: TestDateRange, change: TestDateRangeClick }  }">
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12">
            <div style="height:40px;"></div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12">
            <div class="form-group">
                <label>Starting Date For Importing Historical Data</label>

                <div style="display: inline-block; margin-left: 20px; top: 10px; position: relative;"
                     data-bind="template: {
                            name: 'Date-Picker-Widget',
                            data: { value: StartingDateForOrders,
                                    change: function(value) { console.log(value); } } }"></div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12">
            <div style="height: 40px;"></div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12">
            <label>Use Default Margin in Reports for all $0 CoGS</label>

            <div style="display: inline-block; width: 125px; margin-left: 30px; position: relative;">
                <select class="form-control">
                    <option>Yes</option>
                    <option>No</option>
                </select>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12">
            <div style="height: 10px;"></div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12">
            <label>Default Margin</label>

            <div style="display: inline-block; width: 90px; margin-left: 30px; position: relative; top: 13px;">
                <div data-bind="template: { name: 'Number-Editor-Widget', data: $root.DefaultMarginEditor }"></div>
            </div>

            <div style="display: inline-block; margin-left: 10px; position: relative;">
                <a href="#" class="btn btn-primary" style="width: 100px; display: inline-block;">
                    Save &nbsp;<i class="glyphicon glyphicon-floppy-disk"></i>
                </a>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12">
            <div style="height: 20px;"></div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12">
            <label>Bulk apply value to all CoGS Data</label>

            <div style="display: inline-block; margin-left: 10px; position: relative;">
                <a href="#" class="btn btn-warning" data-bind="click: BulkEditAllCogsDialogPopup"
                   style="width: 200px; display: inline-block; margin-top: -4px;">
                    Bulk Set CoGS Data &nbsp;<i class="glyphicon glyphicon-list"></i>
                </a>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12">
            <div class="vert-spacer"></div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12">
            <label>When should revenues/profits be recognized for orders?</label>

            <div class="preference-control-cell">
                <div class="radio">
                    <label>
                        <input type="radio" name="optionsRadios"
                               value="@ProfitRealization.OrderReceived" checked>
                        When the order is created
                    </label>
                </div>
                <div class="radio">
                    <label>
                        <input type="radio" name="optionsRadios"
                               value="@ProfitRealization.PaymentClears">
                        When payment for the order is captured
                    </label>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12">
            <div style="height: 20px;"></div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12">
            <label>Default Date Range for Dashboard</label>
            <div class="preference-control-cell" data-bind="foreach: DateRangeOptions">
                <div class="radio">
                    <label>
                        <input type="radio" name="defaultDateRadio" data-bind="value: $data.Id" value="option1" checked>
                        <span data-bind="text: $data.Name"></span>
                    </label>
                </div>
            </div>
        </div>
    </div>
</script>

<!-- KnockoutJS Root View -->
<div data-bind="template: { name: 'Main-Template' }">
</div>

<!-- KnockoutJS Model -->
<script>
    var ProfitWise = ProfitWise || {};
    ProfitWise.EditPreferencesModel = function (initialValues) {
        var self = this;
        self.DateRangeOptions = ProfitWiseWidgets.DateRanges;

        // This must be populated with Javascript Date object
        self.StartingDateForOrders = ko.observable(
                initialValues.StartingDateForOrders.parseToJavascriptDate());

        self.TestDateRange = ko.observable({ 
                startdate: initialValues.StartingDateForOrders.parseToJavascriptDate(), 
                enddate: initialValues.StartingDateForOrders.parseToJavascriptDate() 
        });
        
        self.TestDateRangeClick = function(values) {
            console.log(values);
        };


        self.UseDefaultMargin = ko.observable(initialValues.UseDefaultMargin);
        self.DefaultMargin = ko.observable(initialValues.DefaultMargin);
        self.ProfitRealization = ko.observable(initialValues.ProfitRealization);
        self.DateRangeDefault = ko.observable(initialValues.DateRangeDefault);

        self.DefaultMarginEditor =
            new ProfitWiseWidgets.NumberEditorWidgetModel({
                identifier: "number-editor",
                placeholder: "Margin %",
                lowconstraint: 0,
                highconstraint: 100
            });
        
        self.BulkEditAllCogsDialogPopup = function () {
            var url = ProfitWiseConfig.BaseUrl + '/Preferences/BulkEditAllCogs';

            ProfitWiseShopify.LaunchModal({
                src: url,
                title: 'Bulk Edit All Cost of Goods Sold',
                width: 'small',
                height: 420,
            }, self.Refresh);
        };

        return self;
    };


    $(document)
        .ready(function () {
            var data = @Html.Raw(Model.SerializeToJson());
            var model = new ProfitWise.EditPreferencesModel(data);
            
            ko.applyBindings(model);

            model.TestDateRange({
                startdate: "01/01/2014".parseToJavascriptDate(), 
                enddate: "12/31/2014".parseToJavascriptDate() 
            });
        });
</script>

