@using ProfitWise.Data.Model.Preferences
@using ProfitWise.Data.Model.Shop
@using ProfitWise.Web.Attributes
@using Push.Foundation.Utilities.Json

@model ProfitWise.Data.Model.Shop.PwShop
@{
    Layout = "~/Views/Shared/_PageLayout.cshtml";
    Context.AuthenticatedContext().PageTitle = "Edit Preferences";
}
@Html.Partial("~/Views/SharedTemplates/_DatePickerWidget.cshtml")
@Html.Partial("~/Views/SharedTemplates/_DateRangePickerWidget.cshtml")
@Html.Partial("~/Views/SharedTemplates/_NumberEditorWidget.cshtml")
@Html.Partial("_IsDataLoadedAlert")

<style>
    .vert-spacer { height:25px; }
    .preference-control-cell { padding-left:10px; }
    .panel-default { padding:30px;}
    .tour-tour { max-width: 480px; }
</style>

<script type="text/html" id="Main-Template">
    <div class="std-outer-padding" style="padding-top:20px; min-width:568px;">
        <!-- This element will track with the scrollbar via JavaScript wiring to onscroll-->
        <div class="std-inner-padding shadow" style="background-color: #FFF;">
            <div class="row">
                <div class="col-xs-12" style="padding-top:20px;">
                    <h2 id="preferences-title" style="font-weight:700;">ProfitWise &gt; Preferences</h2>
                </div>
            </div>

            <div style="height:40px;"></div>

            <div data-bind="template: { name: 'Page-Content' }"></div>
        </div>
    </div>
</script>

<script type="text/html" id="Page-Content">
    <div class="row">
        <div class="col-xs-12">
            <div class="form-group">
                <div class="panel panel-default" id="starting-date">
                    <label>Starting Date For Importing Historical Data</label>                    
                    <div style="position: relative;"
                         data-bind="template: {
                            name: 'Date-Picker-Widget',
                            data: { value: StartingDateForOrders,
                                    change: StartingDateChange } }"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12">
            <div class="vert-spacer"></div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12">
            <div class="panel panel-default" >
                <div id="default-margins">
                    <label>Use Default Margin in Reports for all $0 CoGS</label>

                    <div style="width: 125px; position: relative;">
                        <select class="form-control"
                                data-bind="value: UseDefaultMargin, event: { change: UseDefaultMarginChange }">
                            <option value="1">Yes</option>
                            <option value="0">No</option>
                        </select>
                    </div>
                </div>

                <div style="height:20px;"></div>

                <div data-bind="visible: ShowDefaultMargin" id="default-margin-percent">                
                    <label>Default Margin (%)</label>
                    
                    <div>
                        <div style="display:inline-block; line-height: 50px;">
                            <div data-bind="template: { name: 'Number-Editor-Widget', data: $root.DefaultMarginEditorModel }"></div>
                        </div>

                        <div style="display: inline-block; line-height: 50px; margin-left: 10px;">
                            <a href="#" class="btn btn-primary"
                               style="width: 100px; margin-top:-27px;"
                               data-bind="click: UseDefaultMarginChange">
                                Save &nbsp;<i class="glyphicon glyphicon-floppy-disk"></i>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row">
        <div class="col-xs-12">
            <div class="vert-spacer"></div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12">
            <div class="panel panel-default" id="profit-realization">
                <label>When should revenues/profits be recognized for orders?</label>

                <div class="preference-control-cell">
                    <div class="radio">
                        <label>
                            <input type="radio" name="optionsRadios"
                                   data-bind="value:@ProfitRealizationConstants.OrderReceived,
                                            checked: $root.ProfitRealization,
                                            event: { change: $root.UpdateProfitRealization }">
                            When the order is created
                        </label>
                    </div>
                    <div class="radio">
                        <label>
                            <input type="radio" name="optionsRadios"
                                   data-bind="value:@ProfitRealizationConstants.PaymentClears,
                                            checked: $root.ProfitRealization,
                                            event: { change: $root.UpdateProfitRealization }">
                            When payment for the order is captured
                        </label>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12">
            <div class="vert-spacer"></div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12">
            <div class="panel panel-default" id="default-date-range">
                <label>Default Date Range for Dashboard</label>
                <div class="preference-control-cell" 
                     data-bind="foreach: DateRangeOptions">
                    <div class="radio">
                        <label>
                            <input type="radio" name="defaultDateRadio"
                                   data-bind="value: $data.Id, checked: $root.DateRangeDefault,
                                            event: { change: $root.UpdateDefaultDateRange }">
                            <span data-bind="text: $data.Name"></span>
                        </label>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12">
            <div class="panel panel-default" id="default-date-range">
                <label>Reset the ProfitWise guided tour</label>
                <p>If you cancelled the guided tour, this will allow you to start over.</p>
                <a href="#" class="btn btn-primary" data-bind="click:ResetProfitWiseTour">
                    <i class="glyphicon glyphicon-education"></i> Reset
                </a>
            </div>
        </div>
    </div>
    
    
    <div class="vert-spacer">
    </div>
</script>

<!-- KnockoutJS Root View -->
<div data-bind="template: { name: 'Main-Template' }">
</div>

<!-- KnockoutJS Model -->
<script>
    var ProfitWise = ProfitWise || {};
    ProfitWise.EditPreferencesModel = function (data) {
        var self = this;
        self.DateRangeOptions = ProfitWiseWidgets.DateRanges;

        var startingDate = ProfitWiseFunctions.parseToJavascriptDate(data.StartingDateForOrders);
        self.StartingDateForOrders = ko.observable(startingDate);
        self.OldStartingDateForOrders = ko.observable(startingDate);

        self.StartingDateChange = function(newdate) {
            if (newdate > self.OldStartingDateForOrders()) {
                ShopifyApp.Modal.alert({
                    title: "ProfitWise",
                    message: "The Starting Date for the Historical Data Import can only be set to an earlier date.",
                    okButton: "Ok"
                }, function(result){
                    self.StartingDateForOrders(self.OldStartingDateForOrders());
                });
                return;
            }

            //console.log('Date Comparison', newdate, self.OldStartingDateForOrders());

            if (newdate < self.OldStartingDateForOrders()) {
                console.log(typeof newdate, typeof self.OldStartingDateForOrders());

                flow.exec(
                    function() {
                        var ajax = new ProfitWiseFunctions.Ajax();
                        ajax.HttpPost(
                            "/Preferences/UpdateStartingDate",
                            { startDate: self.StartingDateForOrders() }, this);
                    },
                    function() {
                        self.OldStartingDateForOrders(self.StartingDateForOrders());

                        ShopifyApp.Modal.alert({
                            title: "ProfitWise",
                            message: "Successfully changed Start Date for Historical Data Import. " +
                                    "Please allow 1 to 2 hours for new Order data to appear",
                            okButton: "Ok"
                        });
                    });
            }
        };

        self.UseDefaultMargin = ko.observable(data.UseDefaultMargin);
        self.DefaultMarginEditorModel =
            new ProfitWiseWidgets.NumberEditorWidgetModel({
                identifier: "default-margin-editor",
                defaultamount: data.DefaultMargin,
                placeholder: "Margin %",
                lowconstraint: 0,
                highconstraint: 100,
            });
        self.ShowDefaultMargin = ko.computed(function() {
            return self.UseDefaultMargin() == 1;
        });
        self.UseDefaultMarginChange = function() {
            var ajax = new ProfitWiseFunctions.Ajax();
            ajax.HttpPost("/Preferences/UpdateDefaultMargin",
                    { useDefaultMargin: self.UseDefaultMargin() == 1,
                        defaultMargin: self.DefaultMarginEditorModel.Amount() });
        };

        self.ProfitRealization = ko.observable(data.ProfitRealization);
        self.UpdateProfitRealization = function() {
            var ajax = new ProfitWiseFunctions.Ajax();
            ajax.HttpPost("/Preferences/UpdateProfitRealization", { profitRealizationId: self.ProfitRealization() });
        };

        self.DateRangeDefault = ko.observable(data.DateRangeDefault);
        self.UpdateDefaultDateRange = function() {
            var ajax = new ProfitWiseFunctions.Ajax();
            ajax.HttpPost("/Preferences/UpdateDefaultDateRange", { dateRangeId: self.DateRangeDefault() });
        };
        
        self.ResetProfitWiseTour = function() {
            var ajax = new ProfitWiseFunctions.Ajax();
            ajax.HttpPost("/Preferences/ResetTour", { });
        };

        return self;
    };

    ProfitWise.PreferrencesTour = ProfitWiseFunctions.TourFactory([
        {
            orphan: true,
            title: "Welcome to ProfitWise Preferences",
            content: "Welcome to the ProfitWise Preferences screen! Here, you can configure your preferences so that ProfitWise will work exactly as you want it to. We'll walk you through the process and explain each setting as we go.",
            placement: 'bottom',
        },
        {
            element: "#starting-date",
            title: "Starting Date For Import",
            content: "Choose how far back you would like ProfitWise to go when importing your order data. You can enter a date or choose one using the date selector. ProfitWise will import all order data from this date forward. This option has no effect on your Cost of Goods data. This only affects which historical orders are imported into ProfitWise for reporting purposes. This date can always be moved further back, so if you want to come back later and add orders going back further in time, you can modify this date and ProfitWise will import the additional orders.",
            placement: 'bottom',
        },
        {
            element: "#default-margins",
            title: "Default Margin",
            content: "Choose Yes or No here. If you choose Yes, then any products that do not have a Cost of Goods value set will automatically use the default margin value (which we'll set next). If you choose No, then any products that do not have a Cost of Goods value will be considered to have a zero cost.",
            placement: 'bottom',
        },
        {
            element: "#default-margin-percent",
            title: "Default Margin (%)",
            content: "Enter your default margin percentage. This will be used to determine the Cost of Goods Sold for any products without a CoGS value set (assuming you chose to enable this option above). After entering a percentage, click on Save. Note that this percentage represents the default margin. For example, if you set the default margin to 20% and a product sells for $100, then the Cost of Goods Sold for that product will be $80 (resulting in a margin or gross profit of $20).",
            placement: 'bottom',
        },
        {
            element: "#profit-realization",
            title: "Profit Realization",
            content: "ProfitWise reports can be configured to recognize your Shopify revenues in two ways. The first option, 'When the order is placed' will cause order revenues to appear in ProfitWise shortly after the order is received. The second option, 'When payment for the order is captured' will cause order revenues to appear in ProfitWise only once the funds for the order have been captured or marked as paid in Shopify.",
            placement: 'bottom',
        },
        {
            element: "#default-date-range",
            title: "Default Date Range",
            content: "Here, you can choose which date range you would like to have displayed by default when you visit the ProfitWise Dashboard. You can always choose a different date range on the dashboard and save custom report views, but this is the date range that will be displayed by default.",
            placement: 'top',
        },
    ]);

    $(document)
        .ready(function () {
            var data = @Html.Raw(Model.SerializeToJson());
            var model = new ProfitWise.EditPreferencesModel(data);
            ko.applyBindings(model);

            var tourStateJs = @Html.Raw(Context.CurrentUserTourStateJson());
            if (tourStateJs[@TourIdentifiers.ShowPreferences]) {
                ProfitWiseFunctions.ShowTour(@TourIdentifiers.ShowPreferences);
                ProfitWise.PreferrencesTour.init();
                ProfitWise.PreferrencesTour.start();
            }
        });
</script>

