@using ProfitWise.Data.Model.Preferences
@using Push.Foundation.Web.Json
@model ProfitWise.Data.Model.Shop.PwShop
@{
    Layout = "~/Views/Shared/_AuthenticatedLayout.cshtml";
}
@Html.Partial("~/Views/SharedTemplates/_DatePickerWidget.cshtml")
@Html.Partial("~/Views/SharedTemplates/_DateRangePickerWidget.cshtml")
@Html.Partial("~/Views/SharedTemplates/_NumberEditorWidget.cshtml")

<style>
    .vert-spacer { height:65px; }
    .preference-control-cell { padding-left:40px; }
</style>

<script type="text/html" id="Main-Template">
    <div class="std-outer-padding">
        <div class="standard-header-sleeve" style="height: 150px;">
            <!-- This element will track with the scrollbar via JavaScript wiring to onscroll-->
            <div class="standard-header top-border-facade std-inner-padding">
                <div class="row">
                    <div class="col-xs-12" style="padding-top:20px;">
                        <h2 styl="font-weight:700;">Profitwise &gt; Edit Preferences</h2>
                    </div>

                </div>
            </div>
        </div>
    </div>

    <div class="page-content-sleeve">
        <div class="page-content std-inner-padding" style="min-height: 400px; padding-bottom: 100px;">
            <div data-bind="template: { name: 'Page-Content' }"></div>
        </div>
    </div>
</script>

<script type="text/html" id="Page-Content">
    <div class="row">
        <div class="col-xs-5">
            <div class="form-group">
                <label>Starting Date For Importing Historical Data</label>

                <div style="display: inline-block; margin-left: 20px; top: 10px; position: relative;"
                     data-bind="template: {
                            name: 'Date-Picker-Widget',
                            data: { value: StartingDateForOrders,
                                    change: StartingDateChange } }"></div>
            </div>
        </div>
        <div class="col-xs-7">
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12">
            <div style="height: 40px;"></div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12">
            <label>Use Default Margin in Reports for all $0 CoGS</label>

            <div style="display: inline-block; width: 125px; margin-left: 30px; position: relative;">
                <select class="form-control" 
                        data-bind="value: UseDefaultMargin, event: { change: UseDefaultMarginChange }">
                    <option value="1">Yes</option>
                    <option value="0">No</option>
                </select>
            </div>
        </div>
    </div>
    
    <div data-bind="visible: ShowDefaultMargin">
        <div class="row">
            <div class="col-xs-12">
                <div style="height: 10px;"></div>
            </div>
        </div>

        <div class="row">
            <div class="col-xs-12">
                <label>Default Margin (%)</label>

                <div style="display: inline-block; width: 90px; margin-left: 30px; position: relative; top: 13px;">
                    <div data-bind="template: { name: 'Number-Editor-Widget', data: $root.DefaultMarginEditorModel }"></div>
                </div>

                <div style="display: inline-block; margin-left: 10px; position: relative;">
                    <a href="#" class="btn btn-primary" 
                       style="width: 100px; display: inline-block;"
                       data-bind="click: UseDefaultMarginChange">
                        Save &nbsp;<i class="glyphicon glyphicon-floppy-disk"></i>
                    </a>
                </div>
            </div>
        </div>
    </div>   

    <div class="row">
        <div class="col-xs-12">
            <div class="vert-spacer"></div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12">
            <label>When should revenues/profits be recognized for orders?</label>

            <div class="preference-control-cell">
                <div class="radio">
                    <label>
                        <input type="radio" name="optionsRadios"
                               data-bind="value:@ProfitRealization.OrderReceived,
                                            checked: $root.ProfitRealization, 
                                            event: { change: $root.UpdateProfitRealization }">
                        When the order is created
                    </label>
                </div>
                <div class="radio">
                    <label>
                        <input type="radio" name="optionsRadios"
                               data-bind="value:@ProfitRealization.PaymentClears,
                                            checked: $root.ProfitRealization, 
                                            event: { change: $root.UpdateProfitRealization }">
                        When payment for the order is captured
                    </label>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12">
            <div style="height: 20px;"></div>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12">
            <label>Default Date Range for Dashboard</label>
            <div class="preference-control-cell" data-bind="foreach: DateRangeOptions">
                <div class="radio">
                    <label>
                        <input type="radio" name="defaultDateRadio" 
                               data-bind="value: $data.Id, checked: $root.DateRangeDefault, 
                                            event: { change: $root.UpdateDefaultDateRange }">
                        <span data-bind="text: $data.Name"></span>
                    </label>
                </div>
            </div>
        </div>
    </div>
   

    <div class="row">
        <div class="col-xs-12">
            <div style="height: 40px;"></div>
        </div>
    </div>
    
    <!-- TODO - eliminate for Production deployment -->
    <div class="row">
        <div class="col-xs-12">
            <label>Invoke test of HangFire queueing functionality</label>

            <div style="display: inline-block; margin-left: 30px; position: relative;">
                <a href="#" class="btn btn-danger"
                   style="display: inline-block;" data-bind="click: TestHangFireClick">
                    Test HangFire &nbsp;<i class="glyphicon glyphicon-flash"></i>
                </a>
            </div>
        </div>
    </div>

</script>

<!-- KnockoutJS Root View -->
<div data-bind="template: { name: 'Main-Template' }">
</div>

<!-- KnockoutJS Model -->
<script>
    var ProfitWise = ProfitWise || {};
    ProfitWise.EditPreferencesModel = function (data) {
        var self = this;
        self.DateRangeOptions = ProfitWiseWidgets.DateRanges;

        // This must be populated with Javascript Date object
        self.StartingDateForOrders = ko.observable(data.StartingDateForOrders.parseToJavascriptDate());        
        self.OldStartingDateForOrders = ko.observable(data.StartingDateForOrders.parseToJavascriptDate());
        self.StartingDateChange = function(newdate) {
            if (newdate > self.OldStartingDateForOrders()) {
                ShopifyApp.Modal.alert({
                    title: "ProfitWise",
                    message: "The Starting Date for the Historical Data Import can only be set to an earlier date.",
                    okButton: "Ok"
                }, function(result){
                    self.StartingDateForOrders(self.OldStartingDateForOrders());
                });
                return;
            } 
            if (newdate < self.OldStartingDateForOrders()) {
                flow.exec(
                    function() {
                        var ajax = new ProfitWiseFunctions.Ajax();
                        ajax.HttpPost(
                            "/Preferences/UpdateStartingDate", 
                            { startDate: self.StartingDateForOrders() }, this);
                    },
                    function() {
                        self.OldStartingDateForOrders(self.StartingDateForOrders());

                        ShopifyApp.Modal.alert({
                            title: "ProfitWise",
                            message: "Successfully changed Start Date for Historical Data Import. " +
                                    "Please allow 1 to 2 hours for new Order data to appear",
                            okButton: "Ok"
                        });
                    });
            }
        };
        
        self.UseDefaultMargin = ko.observable(data.UseDefaultMargin);
        self.DefaultMarginEditorModel =
            new ProfitWiseWidgets.NumberEditorWidgetModel({
                identifier: "default-margin-editor",
                defaultamount: data.DefaultMargin,
                placeholder: "Margin %",
                lowconstraint: 0,
                highconstraint: 100,
            });
        self.ShowDefaultMargin = ko.computed(function() {
            return self.UseDefaultMargin() == 1;
        });
        self.UseDefaultMarginChange = function() {
            var ajax = new ProfitWiseFunctions.Ajax();
            ajax.HttpPost("/Preferences/UpdateDefaultMargin",
                    { useDefaultMargin: self.UseDefaultMargin() == 1, 
                        defaultMargin: self.DefaultMarginEditorModel.Amount() });
        };

        self.ProfitRealization = ko.observable(data.ProfitRealization);
        self.UpdateProfitRealization = function() {
            var ajax = new ProfitWiseFunctions.Ajax();
            ajax.HttpPost("/Preferences/UpdateProfitRealization", { profitRealizationId: self.ProfitRealization() });
        };
        
        self.DateRangeDefault = ko.observable(data.DateRangeDefault);
        self.UpdateDefaultDateRange = function() {
            var ajax = new ProfitWiseFunctions.Ajax();
            ajax.HttpPost("/Preferences/UpdateDefaultDateRange", { dateRangeId: self.DateRangeDefault() });
        };

        
        self.TestHangFireClick = function() {
            var ajax = new ProfitWiseFunctions.Ajax();
            ajax.HttpPost("/Preferences/HangFireTest", {}, 
                        function () { console.log("Test HangFire Job was successfully queued!"); });
        };

        return self;
    };


    $(document)
        .ready(function () {
            var data = @Html.Raw(Model.SerializeToJson());
            var model = new ProfitWise.EditPreferencesModel(data);
            
            ko.applyBindings(model);
        });
</script>

