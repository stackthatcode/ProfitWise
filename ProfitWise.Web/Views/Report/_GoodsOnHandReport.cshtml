@using ProfitWise.Data.Model.GoodsOnHand
@using ProfitWise.Web.Controllers

<style>
    .report-viewer-top-button {
        width: 130px;
    }
    
    .report-widget-label {
        font-weight: 600;
        color: #555;
        font-size: 1.0em;
        text-transform: uppercase;
        letter-spacing: 0.30em;
    }
    
    .report-widget-drilldown-link {
        font-weight:700; 
        margin-top:10px;
        display: inline-block;
    }

    .profit-table tr td:nth-child(1), .profit-table tr th:nth-child(1)  {
        width:25%;
        text-align:left;
    }
    .profit-table tr td:nth-child(2), .profit-table tr th:nth-child(2)  {
        width:20%;
        text-align:right;
    }
    .profit-table tr td:nth-child(3), .profit-table tr th:nth-child(3)  {
        width:20%;
        text-align:right;
    }
    .profit-table tr td:nth-child(4), .profit-table tr th:nth-child(4)  {
        width:20%;
        text-align:right;
    }
    .profit-table tr td:nth-child(5), .profit-table tr th:nth-child(5)  {
        width:20%;
        text-align:right;
    }

    .executive-summary h1 {
        font-weight: 700;
        margin-top: 6px;
        margin-bottom: 0px;
    }
    .executive-summary-label {
        font-weight: 400;
        color: #777;
    }
    .executive-summary .summary-cell {
        text-align: left;
        padding: 15px;
    }

    .summary-header {
        text-align:center; border-bottom:1px dashed #CCC; overflow:auto;
    }

    .pie-chart {
        min-width: 310px; height: 400px; max-width: 600px;margin: 0 auto;clear: both;
    }

    #detail-report-table tr td:nth-child(1), #detail-report-table tr th:nth-child(1) {
        width: 22%;
    }

    #detail-report-table tr td:nth-child(2), #detail-report-table tr th:nth-child(2) {
        width: 14%;
        text-align: right;
    }

    #detail-report-table tr td:nth-child(3), #detail-report-table tr th:nth-child(3) {
        width: 14%;
        text-align: right;
    }

    #detail-report-table tr td:nth-child(4), #detail-report-table tr th:nth-child(4) {
        width: 13%;
        text-align: right;
    }

    #detail-report-table tr td:nth-child(5), #detail-report-table tr th:nth-child(5) {
        width: 13%;
        text-align: right;
    }

    #detail-report-table tr td:nth-child(6), #detail-report-table tr th:nth-child(6) {
        width: 13%;
        text-align: right;
    }

    #detail-report-table tr td:nth-child(7), #detail-report-table tr th:nth-child(7) {
        width: 11%;
        text-align: right;
    }
</style>

<!-- Profitability Views -->
<script id="Report-Goods-On-Hand" type="text/html">
    <div data-bind="ifnot: DatasetLoaded">
        <div style="min-height: 600px;">
            <h1 style="margin-top: 100px; text-align: center; font-weight: 700; font-size: 6em; color: #EEE;">
                No Report Loaded Yet
            </h1>
        </div>
    </div>
    
    <div data-bind="if: DatasetLoaded">
        <div style="min-height: 600px;">            
            <!-- Executive Summary -->            
            <div data-bind="template: { name: 'Report-Goods-On-Hand-Totals' }"></div>
            
            <!-- Chart -->
            <div data-bind="visible: ShowBackButton" style="width:100%;">
                <div style="float:right; width:100px;">
                    <a href="#" class="btn btn-default" data-bind="click: BackClick"
                       style="width:100px; z-index: 1000; position: absolute; margin-top:0px;">
                        <i class="glyphicon glyphicon-arrow-left"></i> Back
                    </a>
                </div>
            </div>
            
            <div class="panel panel-default" style="padding:15px;">
                <div class="report-widget-label" style="text-align:center;">Value of Goods on Hand</div>
                <div id="column-chart" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
            </div>

            <!-- Table -->
            <div data-bind="template: { name: 'Report-Goods-On-Hand-Details'  }"></div>

        </div>

    </div>
</script>
<script id="Report-Goods-On-Hand-Totals" type="text/html">
    <!-- Executive Summary -->
    <div class="panel panel-default" style="padding-left:30px; padding-right:30px;">
        <div class="row executive-summary" data-bind="with: Data">
            <div class="col-xs-3 summary-cell">
                <h1 data-bind="text: ProfitWiseFunctions.FormatCurrency(Totals.TotalCostOfGoodsOnHand, CurrencyId)"></h1>
                <div class="executive-summary-label">Cost of Goods on Hand</div>
            </div>
            <div class="col-xs-3 summary-cell">
                <h1 data-bind="text: ProfitWiseFunctions.FormatCurrency(Totals.TotalPotentialRevenue, CurrencyId)"></h1>
                <div class="executive-summary-label">Potential Revenue</div>
            </div>
            <div class="col-xs-3 summary-cell">
                <h1 data-bind="text: ProfitWiseFunctions.FormatCurrency(Totals.TotalPotentialProfit, CurrencyId)"></h1>
                <div class="executive-summary-label">Potential Profit</div>
            </div>
            <div class="col-xs-3 summary-cell">
            </div>
        </div>
    </div>
</script>

<script id="Report-Goods-On-Hand-Details" type="text/html">
    <div data-bind="if: Data().Details.length > 0 && PagingModel.PageCount() > 0" style="text-align: right;">
        <div style="overflow:auto; margin-top:30px; margin-bottom: 30px;" 
             data-bind="template: { name: 'Paging-Widget', data: PagingModel }">
        </div>
    </div>
    
    <div data-bind="if: Data().Details.length > 0">
        <table class="table table-striped table-hover" id="detail-report-table">
            <thead>
            <tr>
                <th>Name</th>
                <th style="text-align: center;">Unit Price</th>
                <th data-bind="template: { name: 'Sortable-Column-Header',
                                data: { ColumnIndex: 0, ColumnName: '# In Stock', Model: SortingModel } }"></th>
                <th data-bind="template: { name: 'Sortable-Column-Header',
                                data: { ColumnIndex: 1, ColumnName: 'Total CoGS', Model: SortingModel } }"></th>
                <th data-bind="template: { name: 'Sortable-Column-Header',
                                data: { ColumnIndex: 2, ColumnName: 'Potential Revenue', Model: SortingModel } }"></th>
                <th data-bind="template: { name: 'Sortable-Column-Header',
                                data: { ColumnIndex: 3, ColumnName: 'Potential Profit', Model: SortingModel } }"></th>
            </tr>
            </thead>
            
            <!-- ko with: Data() -->
            <tbody data-bind="foreach: Details">
            <tr>
                <td>
                    <div class="overflow-gracefully" style="max-width:350px;"
                         data-bind="text: Name, tooltip: { title: Name, placement: 'bottom' }"></div>
                </td>

                <td style="text-align: center;">
                    <div data-bind="if: MinimumPrice != MaximumPrice">
                        <span class="overflow-gracefully"
                              data-bind="text: ProfitWiseFunctions.FormatCurrency(MinimumPrice, $parent.CurrencyId)"></span>
                        to
                        <span class="overflow-gracefully"
                              data-bind="text: ProfitWiseFunctions.FormatCurrency(MaximumPrice, $parent.CurrencyId)"></span>
                    </div>
                    <div data-bind="if: MinimumPrice == MaximumPrice">
                        <span class="overflow-gracefully"
                              data-bind="text: ProfitWiseFunctions.FormatCurrency(MaximumPrice, $parent.CurrencyId)"></span>
                    </div>
                </td>

                <td>
                    <span class="overflow-gracefully"
                          data-bind="text: TotalInventory"></span>
                </td>

                <td>
                    <span class="overflow-gracefully"
                          data-bind="text: ProfitWiseFunctions.FormatCurrency(TotalCostOfGoodsSold, $parent.CurrencyId)"></span>
                </td>
                <td>
                    <span class="overflow-gracefully"
                          data-bind="text: ProfitWiseFunctions.FormatCurrency(TotalPotentialRevenue, $parent.CurrencyId)"></span>
                </td>
                <td>
                    <span class="overflow-gracefully"
                          data-bind="text: ProfitWiseFunctions.FormatCurrency(TotalPotentialProfit, $parent.CurrencyId)"></span>
                </td>
            </tr>
            </tbody>
            <!-- /ko -->
        </table>
    </div>

    <div data-bind="if: Data().Details.length > 0 && PagingModel.PageCount() > 0" style="text-align: right;">
        <div style="overflow:auto; margin-top:30px; margin-bottom: 30px;"
             data-bind="template: { name: 'Paging-Widget', data: PagingModel }">
        </div>
    </div>
</script>



<script id="Goods-On-Hand-Model">
    ProfitWiseWidgets.GoodsOnHandModel = function () {
        var self = this;
        self.ReportId = ko.observable();
        self.Data = ko.observable();
        self.DatasetLoaded = ko.observable(false);

        self.PagingModel = new ProfitWiseWidgets.PagingModel();
        self.PagingModel.Callback = function () { self.RetrieveData(); };
        self.PagingModel.ShowPageSizeSelector(false);
        self.PagingModel.ScrollToTopEnabled(false);
        self.PagingModel.PageNumber(1);
        self.PagingModel.PageSize(@GoodsOnHandServiceController.FixedPageSize);

        self.SortingModel = new ProfitWiseWidgets.SortingModel();
        self.SortingModel.Callback = function () { self.RetrieveData(); };
        self.SortingModel.SelectedColumnIndex(1);   // Default to CoGS descending...

        self.Ordering = ko.computed(function () {
            var index = self.SortingModel.SelectedColumnIndex();
            var descending = self.SortingModel.SortByDirectionDown();

            if (index == 0)
                return descending ?
                    '@ColumnOrdering.InventoryDescending' : '@ColumnOrdering.InventoryAscending';
            if (index == 1)
                return descending ?
                    '@ColumnOrdering.CogsDescending' : '@ColumnOrdering.CogsAscending';
            if (index == 2)
                return descending ?
                    '@ColumnOrdering.PotentialRevenueDescending' : '@ColumnOrdering.PotentialRevenueAscending';
            if (index == 3)
                return descending ?
                    '@ColumnOrdering.PotentialProfitDescending' : '@ColumnOrdering.PotentialProfitAscending';

            return '@ColumnOrdering.CogsDescending';
        });

        self.HighChartRef = null;

        self.LoadModel = function(data) {
            self.Data(data);
            self.PagingModel.RecordCount(data.DetailsCount);
            self.ReportId(data.Totals.ReportId);
            self.DatasetLoaded(true);

            if (!self.HighChartRef) {
                ProfitWiseWidgets.LoadColumnChart(
                    '#column-chart', 'Cost of Goods on Hand',
                    data.Chart, null, data.CurrencyId, self.Drilldown);

                self.HighChartRef = $("#column-chart").highcharts();
            } else {
                self.HighChartRef.series[0].setData(data.Chart[0].data);
            }
        };

        self.DrilldownStack = ko.observableArray();

        self.ShowBackButton = ko.computed(
            function () {
                return self.DrilldownStack().length > 0;
            }
        );

        self.CurrentQueryStringBase = ko.observable();

        self.UrlBuilder = function(baseurl) {
            var output = baseurl +
                "?reportId=" + self.ReportId() + 
                "&ordering=" + self.Ordering() +
                "&pageNumber=" + self.PagingModel.PageNumber();
            
            if (self.CurrentQueryStringBase()) {
                output += "&" + self.CurrentQueryStringBase();
            }
            return output;
        };

        // Refreshes the drilldown and loads from the current Grouping selection
        self.RefreshReportData = function (reportId, callback) {
            self.HighChartRef = null;
            $('html, body').animate({ scrollTop: 0 });
            self.PopulateAndClearDrilldown(reportId, callback);
        };
        
        self.PopulateAndClearDrilldown = function (reportId, callback) {
            flow.exec(
                function() {
                    var url = "/GoodsOnHandService/Populate?reportId=" + reportId;
                    var ajax = new ProfitWiseFunctions.Ajax();
                    ajax.HttpPost(url, {}, this);
                },
                function () {
                    self.ReportId(reportId);
                    self.PagingModel.PageNumber(1);

                    // Clear the drilldown state
                    self.DrilldownStack.removeAll();
                    self.CurrentQueryStringBase(null);

                    self.RetrieveData(callback);
                }
            );
        };

        self.RetrieveData = function(callback) {
            flow.exec(
                function () {
                    var ajax = new ProfitWiseFunctions.Ajax();
                    ajax.HttpGet(self.UrlBuilder("/GoodsOnHandService/Data"), this);
                },
                function (data) {
                    self.LoadModel(data);
                    if (callback) {
                        callback();
                    }
                });
        };

        // Loads using the Drilldown URL's grouping
        self.Drilldown = function(e) {
            if (e.seriesOptions || !e.point.querystringbase) {
                return;
            }

            // First push the current state onto the stack
            var state = {
                pageNumber: self.PagingModel.PageNumber(),
                sortIndex: self.SortingModel.SelectedColumnIndex(),
                sortByDesc: self.SortingModel.SortByDirectionDown(),
                querystringbase: self.CurrentQueryStringBase(),
            };
            self.DrilldownStack.push(state);

            // Next, traverse to the drilldown url and load
            var newquerystringbase = e.point.querystringbase;
            self.CurrentQueryStringBase(newquerystringbase);
            self.PagingModel.PageNumber(1);
            self.RetrieveData();
        };

        self.BackClick = function () {            
            var stateRecovery = self.DrilldownStack.pop();

            self.CurrentQueryStringBase(stateRecovery.querystringbase);
            self.SortingModel.SelectedColumnIndex(stateRecovery.sortIndex);
            self.SortingModel.SortByDirectionDown(stateRecovery.sortByDesc);
            self.PagingModel.PageNumber(stateRecovery.pageNumber);

            self.RetrieveData();
        };

        self.ExportDetailCallback = function (downloadIframeId) {
            var url = ProfitWiseConfig.BaseUrl + self.UrlBuilder("/GoodsOnHandService/Export");
            document.getElementById(downloadIframeId).src = url;
        };

        return self;
    };
</script>
