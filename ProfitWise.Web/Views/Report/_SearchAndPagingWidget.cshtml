<!-- Depends on Paging Widget *** please include -->

<!-- Requires FilterPagingWidget model to be passed in KO $data parameter -->
<script type="text/html" id="Search-And-Paging-Widget">
    <!-- This element is 120px tall -->
    <div class="row-fluid" style="height: 60px; overflow: auto;">
        <div class="col-xs-12 no-side-padding" style="padding-top: 25px;">
            <div class="input-group">
                <input type="text" class="form-control"
                       data-bind="value: SearchText,
                            attr: { placeholder: $data.PlaceHolderText },
                            event: { keyup: $data.SearchKeyCallback }">
                <div class="input-group-btn">
                    <button class="btn btn-default" data-bind="click: RemoveSearch" style="color:#888;">
                        <i class="glyphicon glyphicon-remove"></i></button>
                    <button data-bind="click: SearchClick" 
                            class="btn btn-default" 
                            style="height: 34px !important;">Go!</button>
                </div><!-- /input-group -->
            </div>
        </div>
    </div>

    <div class="row-fluid">
        <div class="col-xs-5 no-side-padding"></div>
        <div class="col-xs-7 no-side-padding" style="padding-top: 15px; overflow:visible;"
             data-bind="if: $data.PagingModel.PageCount() > 1">
            <div data-bind="template: { name: 'Paging-Widget', data: $data.PagingModel }">
            </div>
        </div>
    </div>
</script>

<script type="text/html" id="Standalone-Paging-Widget">
    <div class="row-fluid">
        <div class="col-xs-5 no-side-padding">
        </div>

        <div class="col-xs-7 no-side-padding" style="padding-top: 15px; overflow:visible;"
             data-bind="if: $data.PagingModel.PageCount() > 1">
            <div data-bind="template: { name: 'Paging-Widget', data: $data.PagingModel }">
            </div>
        </div>
    </div>
</script>

<script>
    ProfitWiseWidgets = ProfitWiseWidgets || {};

    ProfitWiseWidgets.SearchAndPagingWidgetModel = function() {
        var self = this;
        self.SearchText = ko.observable();
        self.PlaceHolderText = ko.observable("Search...");
        self.PagingModel = new ProfitWiseWidgets.PagingModel();

        self.RefreshCallback = function() { };
        self.SelectAllCallback = function () { };
        

        // "public" interfaces
        // NOTE: this is not consistent with other widgets... may need to update for consistency
        self.RegisterRefreshCallback = function(callback) {
            self.RefreshCallback = callback;
            self.PagingModel.Callback = callback;
        };
        
        self.SetPageNumber = function(pageNumber) {
            self.PagingModel.PageNumber(pageNumber);
        };
        
        self.GetPageNumber = function () {
            return self.PagingModel.PageNumber();
        };

        self.SetPageSize = function (pageSize) {
            self.PagingModel.PageSize(pageSize);
        };

        self.GetPageSize = function() {
            return self.PagingModel.PageSize();
        };

        self.SetRecordCount = function (recordCount) {
            self.PagingModel.RecordCount(recordCount);
            if (self.PagingModel.PageNumber() > self.PagingModel.PageCount()) {
                self.PagingModel.PageNumber(self.PagingModel.PageCount());
            }
            if (self.PagingModel.PageNumber() == 0) {
                self.PagingModel.PageNumber(1);
            }
        };

        self.RemoveSearch = function () {            
            self.SearchText("");
            self.SearchClick();
        };

        self.SearchClick = function () {
            $('html,body').animate({ scrollTop: 0 });
            self.RefreshCallback();
        };

        self.ClearSearchText = function() {
            self.SearchText("");
        };

        // Back-end functions
        self.SearchKeyCallback = function(model, event) {
            if (event.keyCode == 27) {
                self.SearchText("");
                self.SearchText.valueHasMutated();
                self.SearchClick();
                return false;
            }
            if (event.keyCode == 13) {
                self.SearchClick();
                return false;
            }            
            return true;
        };

        return self;
    };
</script>

