@using ProfitWise.Data.Model
@using Push.Foundation.Web.Json

<style>
    table#product-types td {
        height: 70px !important;
        font-size: 14px;
        vertical-align: middle !important;
    }
    table#product-types tr td:nth-child(1) {
        width: 10%;
    }
    table#product-types tr td:nth-child(2) {
        width: 45%;
    }
    table#product-types tr td:nth-child(3) {
        width: 45%;
    }
    .report-viewer-top-button {
        width: 130px;
    }
</style>

<script id="Report-Viewer-Top-Level" type="text/html">
    <div id="report-viewer-header" class="fixed-positioning-container">
        <div class="standard-header-sleeve" style="height: 150px; border-bottom: 1px solid #FFF; background-color: teal;">

            <!-- This element will track with the scrollbar via JavaScript wiring to onscroll-->
            <div class="standard-header standard-padding top-border-facade"
                 style="overflow: visible; padding-top:20px;">
                <div class="col-xs-6 no-side-padding">
                    <div data-bind="if: ReportViewerContext.ReportLoaded()">
                        <div data-bind="with: ReportViewerContext">
                            <div class="popover-container">
                                <h4 style="display: inline-block; font-weight: 700;"
                                    data-bind="text: Name"></h4>
                            </div>

                            <div style="font-size: 1.0em; color: #666;">
                                <div style="height: 25px;" data-bind="template:{ name: 'Report-Selection-Preview', data: ReportSelectionCountPreviewModel }"></div>

                                <div style="height: 25px;">Filtered by <a href="#">Product Types, Vendors, and Variants</a></div>

                                <div style="height: 25px;">
                                    <span>Grouped by </span>
                                    <span data-bind="template: { name: 'Selector-Popover-Widget', data: GroupingPopoverModel }">
                                    </span>

                                    <span>/</span>

                                    <span class="popover-container">
                                        Ordered by <a href="#">Profitability (most-to-least)</a>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-xs-6 no-side-padding" style="padding-top:10px; min-width:500px;">
                    <div class="btn-group pull-right" 
                         data-bind="template: { name: 'Report-Viewer-Report-Selector', 
                                                    data: { SystemDefinedReports: $data.SystemDefinedReports,
                                                            UserDefinedReports: $data.UserDefinedReports,
                                                            SelectReportClick: $data.SelectReportClick} }">
                    </div>

                    <div class="pull-right" style="margin-right: 7px;">
                        <a href="#" class="btn btn-primary report-viewer-top-button">
                            Save As &nbsp;<i class="glyphicon glyphicon-floppy-disk"></i>
                        </a>
                    </div>

                    <div class="pull-right btn-group" style="margin-right: 7px;">
                        <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">...</button>

                        <ul class="dropdown-menu">
                            <li><a href="#">Save As</a></li>
                            <li><a href="#">Rename</a></li>
                            <li><a href="#">Delete</a></li>
                        </ul>
                    </div>

                    <div style="clear: both; height: 20px;"></div>

                    <div id="report-date-picker" class="pull-right"
                         data-bind="template: { name: 'Date-Picker-Widget', afterRender: AfterRenderDateRangePicker }"></div>
                    

                    <div class="pull-right">
                        <a href="#" style="margin-right: 7px;"
                           class="btn btn-default report-viewer-top-button" data-bind="click: EditReportClick">
                            Edit Filters &nbsp;<i class="glyphicon glyphicon-filter"></i>
                        </a>
                    </div>
                </div>                   
            </div>
        </div>
    </div>

    <div id="report-viewer-body" class="container page-content-sleeve">
        <!-- Will move/transistion when the filters appear -->
        <div class="page-content" style="margin-top: 150px; padding-top: 30px; overflow: auto;">

            <!-- TODO : allow injection of external template -->
            <div style="position: relative; width: 100%;">
                <img style="width: 100%;" src="@Url.Content("~/Content/images/ProfitabilityMockup.PNG")" />
                <!--<div data-bind="template: { name: 'Body-Template-That-You-Configured'}"></div> -->
            </div>
        </div>
    </div>
</script>

<!-- Expects $data.options, $data.selection, $data.okcallback and $data.popovercallback -->
<script type="text/html" id="Selector-Popover-Widget">
    <span class="popover-container">
        <a href="#" class="popover-launcher"
           data-bind="click: PopOverLaunchCallback,
                    popover: { options: { placement: 'bottom', trigger: 'click', },
                    template: 'Selector-Popover-Widget-Popover-Layer', data: $data }">
            <span data-bind="text: ElementText"></span>
        </a>
    </span>
</script>
<script type="text/html" id="Selector-Popover-Widget-Popover-Layer">
    <div class="input-group" style="width:250px;">
        <div style="height:30px;" data-bind="text:PromptText"></div>   
        
        <div class="input-group" style="width:100%;">
            <!-- Data-Bind to KO stuff -->
            <select class="form-control" 
                    data-bind="options: Options,
                        optionsText: OptionsText(),
                        value: Selection,
                        optionsValue: OptionsValue()">
            </select>

            <span class="input-group-btn">
                <a href="#" data-bind="click: OkButtonClick"
                   class="btn btn-primary" type="button">Ok</a>
            </span>
        </div>
    </div>
</script>
<script>
    ProfitWiseWidgets = ProfitWiseWidgets || {};

    ProfitWiseWidgets.SelectorPopoverWidgetModel = function () {
        var self = this;

        self.OptionsText = ko.observable();
        self.OptionsValue = ko.observable();
        self.Options = ko.observableArray([]);
        self.Selection = ko.observable();
        self.PromptText = ko.observable();

        self.SelectedOption = ko.computed(function () {
            return AQ(self.Options())
                    .firstOrDefault(function (item) { return item[self.OptionsValue()] == self.Selection(); });
        });

        self.ElementText = ko.computed(function() {
            var option = self.SelectedOption();
            var output = option ? option[self.OptionsText()] : "(No Selection)";
            return output;
        });

        self.PopOverLaunchCallback = function() {};
        self.OkCallback = function() {};

        self.OkButtonClick = function() {
            ProfitWiseFunctions.PopOverCloseAll();
            self.OkCallback();
        };
    };
</script>


<script type="text/html" id="Report-Viewer-Report-Selector">
    <a href="#" class="btn btn-primary dropdown-toggle report-viewer-top-button"
        data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            Select Report &nbsp;<i class="glyphicon glyphicon-chevron-down"></i>
    </a>

    <ul class="dropdown-menu" style="width: 300px;">
        <!-- ko foreach: SystemDefinedReports -->
        <li>
            <a href="#" data-bind="click: $parent.SelectReportClick">
                <span style="display:inline-block; width:17px;" data-bind="if:CurrentlySelected">
                    <i class="glyphicon glyphicon-ok"></i>
                </span>
                <span data-bind="text: Name"></span>
            </a>
        </li>
        <!-- /ko -->

        <li role="separator" class="divider"></li>

        <!-- ko if: UserDefinedReports().length == 0 -->
        <li><a href="#">(No custom reports defined yet)</a></li>
        <!-- /ko -->
        <!-- ko foreach: UserDefinedReports -->
        <li>
            <a href="#" data-bind="click: $parent.SelectReportClick">
                <span style="display:inline-block; width:17px;" data-bind="if:CurrentlySelected">
                    <i class="glyphicon glyphicon-ok"></i>
                </span>
                <span data-bind="text: Name"></span>
            </a>
        </li>
        <!-- /ko -->
    </ul>
</script>

<script>
    ProfitWiseWidgets = ProfitWiseWidgets || {};

    ProfitWiseWidgets.ReportGroupingOptionsFactory = function() {
        return @Html.Raw(@PwReportExtensions.AllGroupingToNamedObject().SerializeToJson());
    };

    ProfitWiseWidgets.ReportViewerContext = function() {
        var self = this;

        // Reference data        
        self.ReportId = ko.observable();
        self.Name = ko.observable();
        self.StartDate = ko.observable();
        self.EndDate = ko.observable();

        self.GroupingPopoverModel = new ProfitWiseWidgets.SelectorPopoverWidgetModel();
        self.GroupingPopoverModel.Options(ProfitWiseWidgets.ReportGroupingOptionsFactory());
        self.GroupingPopoverModel.PromptText("Select a method for grouping data");
        self.GroupingPopoverModel.OptionsValue("ReportGroupingId");
        self.GroupingPopoverModel.OptionsText("Description");
        self.GroupingPopoverModel.PopOverLaunchCallback = function () { alert('popover open!'); };
        self.GroupingPopoverModel.OkCallback = function () { alert('ok') };
        
        self.Ordering = ko.observable();

        self.ReportSelectionCountPreviewModel = new ProfitWiseWidgets.ReportSelectionCountPreviewModel();

        self.ReportLoaded = ko.computed(function() {
            return self.ReportId() != null;
        });
        
        self.LoadReport = function(reportId, callback) {
            self.ReportId(reportId);
            
            flow.exec(
                function () {
                    var ajax = new ProfitWiseFunctions.Ajax();
                    ajax.HttpGet("/ReportService/Report?reportId=" + reportId, this);
                },
                function (data) {
                    // console.log(data);

                    // Load data into model...
                    self.Name(data.Name);
                    self.StartDate(data.StartDate);
                    self.EndDate(data.EndDate);

                    self.GroupingPopoverModel.Selection(data.GroupingId);
                    //self.Grouping(data.Grouping);
                    //self.Ordering(data.Ordering);

                    self.ReportSelectionCountPreviewModel.ReportId(reportId);
                    self.ReportSelectionCountPreviewModel.Refresh(this);
                },
                function() {
                    if (callback) {
                        callback();
                    }
                }
            );
        };

        self.GroupingChange = function() {
            console.log('ok!!!');
        };

        return self;
    };


    ProfitWiseWidgets.ReportViewerModel = function () {
        var self = this;

        self.ReportList = ko.observable([]);
        self.ReportViewerContext = new ProfitWiseWidgets.ReportViewerContext();

        self.UserDefinedReports = ko.computed(function () {
            return AQ(self.ReportList()).where(function (item) { return item.SystemReport == false; }).toArray();
        });

        self.SystemDefinedReports = ko.computed(function () {
            return AQ(self.ReportList()).where(function (item) { return item.SystemReport == true; }).toArray();
        });

        self.RefreshReportList = function (callback) {
            flow.exec(
                function () {
                    var ajax = new ProfitWiseFunctions.Ajax();
                    ajax.HttpGet("/ReportService/All", this);
                },
                function (data) {
                    AQ(data)
                        .each(
                            function (item) {
                                item.CurrentlySelected =
                                    ko.computed(
                                        function () {
                                            if (!self.ReportViewerContext.ReportLoaded()) {
                                                return false;
                                            }
                                            return self.ReportViewerContext.ReportId()  == item.PwReportId;
                                        });
                            });

                    self.ReportList(data);
                    if (callback) {
                        callback();
                    }
                });
        };

        self.AfterRenderDateRangePicker = function () {
            // TODO - transfer Start and End Date from ReportContext

            ProfitWiseWidgets.CreateDatePicker("#report-date-picker");
        };

        self.SelectReportByReportId = function (id) {
            var report =
                AQ(self.ReportList())
                    .firstOrDefault(function (item) { return item.PwReportId == id; });

            if (report != null) {
                self.SelectReportClick(report);
            }
        };

        self.SelectReportClick = function (data) {
            var reportId = data.PwReportId;
            self.SelectReport(reportId);
        };

        self.SelectReport = function(reportId) {
            flow.exec(
                function () {
                    self.ReportViewerContext.LoadReport(reportId, this);
                },
                function () {
                    self.SelectReportCallback(reportId);
                }
            );
        };

        // This is where something that renders the Report body is wired in
        self.SelectReportCallback = function (reportId) { };

        self.EditReportClick = function () {
            if (self.ReportViewerContext.ReportLoaded()) {
                self.EditReportCallback(self.ReportViewerContext.ReportId());
            }
        };

        self.EditReportCallback = function (reportId) { };

        return self;
    };
</script>

