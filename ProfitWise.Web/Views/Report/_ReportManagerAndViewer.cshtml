@using ProfitWise.Data.Model.Reports
@using Push.Foundation.Utilities.Json


<!-- Acts a container that holds the Viewer and the Editor -->
<script type="text/html" id="Report-Manager">
    <div data-bind="if: $data.InFilterEditMode">
        <div data-bind="template: { name: 'Report-Editor-Top-Level', data: ReportEditorModel }"></div>
    </div>

    <div data-bind="ifnot: $data.InFilterEditMode">
        <div data-bind="template: { name: 'Report-Viewer', data: ReportViewerModel }"></div>
    </div>
</script>

<!-- Report Viewing-specific templates -->
<script id="Report-Viewer" type="text/html">
    <div id="report-viewer-header" class="std-outer-padding" style="min-width:1200px;">
        <div class="standard-header-sleeve" style="height: 235px;">
            <div class="standard-header std-inner-padding top-border-facade" 
                 style="overflow: visible; padding-top:20px;">
                
                <div  data-bind="template: { name: 'Report-Viewer-Header' }"></div>         
            </div>
        </div>
    </div>

    <div id="report-viewer-body" class="container page-content-sleeve" style="min-width:1200px;">
        <div class="page-content std-inner-padding">
            <div style="position: relative; width: 100%;">
                <div data-bind="if: ReportTypeId() == ProfitabilityId">
                    <div data-bind="template: { name: 'Report-Profitability', data: ReportDataModel }"></div>
                </div>
                <div data-bind="if: ReportTypeId() == GoodsOnHandId">
                    <div data-bind="template: { name: 'Report-Goods-On-Hand', data: ReportDataModel }"></div>
                </div>
            </div>
        </div>
    </div>
</script>
<script type="text/html" id="Report-Viewer-Header">
    <div class="col-xs-6 no-side-padding" data-bind="with: $data.ReportInterfaceModel">
        <div data-bind="if: ReportLoaded()">
            <h2 style="display: inline-block; font-weight: 700;" data-bind="text: Name"></h2>

            <div style="display:inline-block; " data-bind="if: CopyForEditing">
                <div style="margin-left:7px; letter-spacing: 0.1em; font-size:0.9em; color:#888;">
                    (EDITING)
                </div>
            </div>
            
            @if (HttpContext.Current.IsDebuggingEnabled)
            {
                <div style="display:inline-block; margin-left:7px; letter-spacing: 0.1em; font-size:0.9em; color:#888;">
                    Report Id: <span data-bind="text: ReportId"></span>
                </div>
            }

            <div style="font-size: 1.0em; color: #666;">
                <div style="height: 25px;" data-bind="template:{ name: 'Report-Selection-Preview', data: ProductCountModel }"></div>

                <div style="height: 25px;">
                    <span>Filtered by</span>
                    <span data-bind="template: { name: 'Report-Filter-Summary-Widget', data: FilterBullpenModel }"></span>
                </div>
                
                <div style="height: 25px;">
                    <span>Grouped by </span>
                    <span data-bind="template: { name: 'Selector-Popover-Widget', data: GroupingPopoverModel }">
                    </span>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xs-6 no-side-padding" style="padding-top:10px; min-width:500px;">
        <div class="btn-group pull-right"
             data-bind="template: { name: 'Report-Viewer-Report-Selector',
                                    data: { SystemDefinedReports: $data.SystemDefinedReports,
                                            UserDefinedReports: $data.UserDefinedReports,
                                            SelectReportClick: $data.SelectReportClick} }">
        </div>

        <div class="pull-right" data-bind="with: ReportInterfaceModel" >
            <!-- ko if: OnlySaveAsAllowed -->
            <div class="pull-right" style="margin-right: 7px;">
                <a href="#" data-bind="click: SaveAs" class="btn btn-primary report-viewer-top-button">
                    Save As &nbsp;<i class="glyphicon glyphicon-floppy-disk"></i>
                </a>
            </div>
            <!-- /ko -->

            <!-- ko ifnot: OnlySaveAsAllowed -->
            <div class="pull-right" style="margin-right: 7px;">
                <a href="#" data-bind="click: Save" class="btn btn-primary report-viewer-top-button">
                    Save &nbsp;<i class="glyphicon glyphicon-floppy-disk"></i>
                </a>
            </div>
            <div class="pull-right btn-group" style="margin-right: 7px;">
                <button type="button" class="btn btn-primary dropdown-toggle" 
                        data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">...</button>

                <ul class="dropdown-menu">
                    <li><a href="#" data-bind="click: SaveAs">Save As</a></li>
                    <li><a href="#" data-bind="click: Delete">Delete</a></li>
                </ul>
            </div>
            <!-- /ko -->
            
            <!-- ko if: ExportVisible -->
            <div class="pull-right" style="margin-right:7px;">
                <a href="#" data-bind="click: ExportCallback" class="btn btn-primary report-viewer-top-button">
                    <i class="glyphicon glyphicon-download-alt"></i> Export
                </a>
                
                <iframe id="download-frame" style="display:none"></iframe>
            </div>
            <!-- /ko -->
        </div>

        <div style="clear: both; height: 20px;"></div>

        <div id="report-date-picker" class="pull-right" style="margin-left: 7px;"
             data-bind="with: ReportInterfaceModel">
            <div data-bind="if: DatePickerEnabled">
                <div data-bind="template: { name: 'Date-Range-Picker-Widget-2',
                                        data: { daterange: DateRange, change: DateRangePickerCallback } }"></div>
            </div>
        </div>

        <div class="pull-right">
            <a href="#" class="btn btn-default report-viewer-top-button" 
               style="width:175px;" data-bind="click: EditReportClick">
                Edit Filters &nbsp;<i class="glyphicon glyphicon-filter"></i>
            </a>
        </div>
    </div>     
</script>
<script type="text/html" id="Report-Viewer-Report-Selector">
    <a href="#" class="btn btn-primary dropdown-toggle report-viewer-top-button"
       data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Select Report &nbsp;<i class="glyphicon glyphicon-chevron-down"></i>
    </a>

    <ul class="dropdown-menu" style="width: 300px;">
        <!-- ko foreach: SystemDefinedReports -->
        <li>
            <a href="#" data-bind="click: $parent.SelectReportClick">
                <span style="display:inline-block; width:17px;" data-bind="if:CurrentlySelected">
                    <i class="glyphicon glyphicon-ok"></i>
                </span>
                <span data-bind="text: Name"></span>
            </a>
        </li>
        <!-- /ko -->

        <li role="separator" class="divider"></li>

        <!-- ko if: UserDefinedReports().length == 0 -->
        <li><a href="#">(No custom reports defined yet)</a></li>
        <!-- /ko -->
        <!-- ko foreach: UserDefinedReports -->
        <li>
            <a class="overflow-gracefully" style="width:280px;" href="#" data-bind="click: $parent.SelectReportClick">
                <span style="display:inline-block; width:17px;" data-bind="if:CurrentlySelected">
                    <i class="glyphicon glyphicon-ok"></i>
                </span>
                <span data-bind="text: Name"></span>
            </a>
        </li>
        <!-- /ko -->
    </ul>
</script>

<script id="Report-Interface-Model">
    ProfitWiseWidgets = ProfitWiseWidgets || {};

    ProfitWiseWidgets.ReportGroupingOptionsFactory = function(reportTypeId) {
        var output = @Html.Raw(@PwReportExtensions.AllGroupingToNamedObject().SerializeToJson());
        if (reportTypeId == '@ReportType.GoodsOnHand') {
            return AQ(output)
                .where(function(item) { return item.GroupingId != '@((int)ReportGrouping.Overall)'; })
                .toArray();
        } else {
            return output;
        }
    };

    ProfitWiseWidgets.ReportOrderingOptionsFactory = function() {
        return @Html.Raw(@PwReportExtensions.AllOrderingToNamedObject().SerializeToJson());
    };

    ProfitWiseWidgets.ReportInterfaceModel = function(reportTypeId) {
        var self = this;

        self.DatePickerEnabled = ko.observable(true);
        self.DefaultReportId = ko.observable();

        self.ReportId = ko.observable();
        self.Name = ko.observable();
        self.DateRange = ko.observable();

        self.CopyForEditing = ko.observable(false);
        self.CopyOfSystemReport = ko.observable(false);
        self.IsSystemReport = ko.observable(false);

        self.ProductCountModel = new ProfitWiseWidgets.ProductCountModel();
        self.FilterBullpenModel = new ProfitWiseWidgets.FilterBullpenModel();
        self.FilterBullpenModel.SummaryClickCallback = function() {
            self.EditFilterClickCallback();
        }

        self.GroupingPopoverModel = new ProfitWiseWidgets.SelectorPopoverModel({
            OptionsValue: "GroupingId",
            OptionsText: "Description",
            Options: ProfitWiseWidgets.ReportGroupingOptionsFactory(reportTypeId),
            PromptText: "Select a method for grouping data",
            OkCallback: function() { self.Update(); },
            PopOverLaunchCallback: function () { self.MakeCopyForEditing(); }
        });

        self.OrderingPopoverModel = new ProfitWiseWidgets.SelectorPopoverModel({
            OptionsValue: "OrderingId",
            OptionsText: "Description",
            Options : ProfitWiseWidgets.ReportOrderingOptionsFactory(),
            PromptText: "Select a method for ordering data",
            OkCallback: function() { self.Update(); },
            PopOverLaunchCallback: function () { self.MakeCopyForEditing(); }
        });
        
        self.ReportLoaded = ko.computed(function() {
            return self.ReportId() != null;
        });

        self.OnlySaveAsAllowed = ko.computed(function() {
            return self.IsSystemReport() || self.CopyOfSystemReport();
        });
        
        self.ExportVisible = ko.computed(function() { return false; });

        self.ExportCallback = function() { alert("Export function invoked!")};

        self.DateRangePickerCallback = function(dateRange) {
            flow.exec(
                function() {
                    self.MakeCopyForEditing(this);
                },
                function() {
                    self.DateRange(dateRange);
                    self.Update();
                }
            );
        };

        self.MakeCopyForEditing = function(callback) {
            flow.exec(
                function() {
                    if (self.CopyForEditing()) {
                        if (callback) {
                            callback();
                        }
                        return;
                    }

                    var ajax = new ProfitWiseFunctions.Ajax();
                    ajax.HttpPost("/ReportService/CopyForEditing", { reportId: self.ReportId() }, this);
                },
                function(data) {
                    self.PopulateModel(data);
                    if (callback) {
                        callback();
                    }
                }
            );
        };

        self.PopulateModel = function(data) {
            var current = data.current;
            var original = data.original;

            self.ReportId(current.PwReportId);
            self.Name(current.Name);

            // Store in the local model as Javascript Date objects, parsed from C# DateTime string
            self.DateRange({
                startdate: current.StartDate.parseToJavascriptDate(),
                enddate: current.EndDate.parseToJavascriptDate()
            });

            self.CopyForEditing(current.CopyForEditing);
            self.IsSystemReport(current.IsSystemReport);
            self.CopyOfSystemReport(current.CopyForEditing && original.IsSystemReport);

            self.GroupingPopoverModel.Selection(current.GroupingId);
            self.OrderingPopoverModel.Selection(current.OrderingId);

            self.ProductCountModel.ReportId(current.PwReportId);
            self.FilterBullpenModel.ReportId(current.PwReportId);
        };

        self.Update = function(callback) {
            flow.exec(
                function () {
                    var ajax = new ProfitWiseFunctions.Ajax();
                    var data = {
                        reportId: self.ReportId(),
                        groupingId: self.GroupingPopoverModel.Selection(),
                        orderingId: self.OrderingPopoverModel.Selection(),
                        startDate: self.DateRange().startdate,
                        endDate: self.DateRange().enddate,
                    };

                    ajax.HttpPost("/ReportService/Update", data, this);
                },
                function() {
                    self.TriggerReportDataRefresh(self.ReportId(), this);
                },
                function () {
                    if (callback) {
                        callback();
                    }
                }
            );
        };

        self.LoadReport = function(reportId, callback) {
            flow.exec(
                function () {
                    var ajax = new ProfitWiseFunctions.Ajax();
                    ajax.HttpGet("/ReportService/Report?reportId=" + reportId, this);
                },
                function (data) {
                    self.PopulateModel(data);
                    self.ProductCountModel.Refresh(this);
                },
                function () {
                    self.FilterBullpenModel.Refresh(this);
                },
                function () {
                    self.TriggerReportDataRefresh(reportId, this);
                },
                function() {
                    if (callback) {
                        callback();
                    }
                }
            );
        };

        self.Save = function() {
            flow.exec(
                function() {
                    var ajax = new ProfitWiseFunctions.Ajax();
                    ajax.HttpPost("/ReportService/Save?reportId=" + self.ReportId(), null, this);
                },
                function (data) {
                    self.LoadReport(data.reportId, this);
                },
                function() {
                    self.TriggerReportListRefresh(this);
                },
                function() {
                    self.TriggerReportDataRefresh(self.ReportId());
                }
            );
        };

        self.SaveAs = function () {
            flow.exec(
                function() {
                    var url = ProfitWiseConfig.BaseUrl + '/Report/SaveAs?reportId=' + self.ReportId();
                    ProfitWiseShopify.LaunchModal({
                            src: url,
                            title: 'Report Save As...',
                            width: 'small',
                            height: 265,
                        },
                        this);
                },
                function(data) {
                    self.ReportId(data.reportId);
                    self.LoadReport(self.ReportId(), this);
                },
                function() {
                    self.TriggerReportListRefresh(this);
                },
                function () {
                    self.TriggerReportDataRefresh(self.ReportId());
                });
        };

        self.Delete = function() {
            flow.exec(
                function () {
                    ProfitWiseShopify.Confirm({
                        message: "Are you sure you want to delete the Report named '" + self.Name() + "'?",
                        callback: this
                    });
                },
                function (result) {
                    if (!result) {
                        return;
                    }
                    var ajax = new ProfitWiseFunctions.Ajax();
                    ajax.HttpPost("/ReportService/Delete?reportId=" + self.ReportId(), null, this);
                },
                function () {
                    self.TriggerReportListRefresh(this);
                },
                function () {
                    self.LoadReport(self.DefaultReportId(), this);
                }
            );
        }

        self.TriggerReportListRefresh = function(callback) { };

        self.TriggerReportDataRefresh = function () { };

        self.EditFilterClickCallback = function() { };

        return self;
    };
</script>
<script id="Report-Viewer-Model">
    ProfitWiseWidgets.ReportViewerModel = function (reportTypeId) {
        var self = this;

        self.ProfitabilityId = '@ReportType.Profitability';
        self.GoodsOnHandId = '@ReportType.GoodsOnHand';

        self.ReportTypeId = ko.observable(reportTypeId);
        self.ReportDataModel = null;

        // Profitability-specific stuff
        if (self.ReportTypeId() == self.ProfitabilityId) {
            self.ReportDataModel = new ProfitWiseWidgets.ProfitabilityModel();
        }
        if (self.ReportTypeId() == self.GoodsOnHandId) {
            self.ReportDataModel = new ProfitWiseWidgets.GoodsOnHandModel();
        }
        self.ReportInterfaceModel = new ProfitWiseWidgets.ReportInterfaceModel(reportTypeId);

        // Upper right menu selector for Reports
        self.ReportList = ko.observable([]);

        self.UserDefinedReports = ko.computed(function () {
            return AQ(self.ReportList())
                .where(function (item) { return item.IsSystemReport == false; }).toArray();
        });

        self.SystemDefinedReports = ko.computed(function () {
            return AQ(self.ReportList())
                .where(function (item) { return item.IsSystemReport == true; }).toArray();
        });
        
        self.RefreshReportList = function (callback) {
            flow.exec(
                function () {
                    var ajax = new ProfitWiseFunctions.Ajax();
                    ajax.HttpGet("/ReportService/All?reportTypeId=" + self.ReportTypeId(), this);
                },
                function (data) {
                    AQ(data).each(
                        function (item) {
                            item.CurrentlySelected =
                                ko.computed(
                                    function () {
                                        if (!self.ReportInterfaceModel.ReportLoaded()) {
                                            return false;
                                        }
                                        return self.ReportInterfaceModel.ReportId() == item.PwReportId;
                                    });
                        });

                    self.ReportList(data);
                    if (callback) {
                        callback();
                    }
                });
        };


        // Model that contains all the functionality for the top header
        self.ReportInterfaceModel.TriggerReportListRefresh = function (callback) {
            self.RefreshReportList(callback);
        };
        self.ReportInterfaceModel.EditFilterClickCallback = function () {
            self.EditReportClick();
        };
        self.ReportInterfaceModel.TriggerReportDataRefresh = function (reportId, callback) {            
            self.ReportDataModel.RefreshReportData(reportId, callback);
        }

        // Configure Report Type specific behavior
        if (self.ReportTypeId() == self.GoodsOnHandId) {
            self.ReportInterfaceModel.DatePickerEnabled(false);
            self.ReportInterfaceModel.DefaultReportId(@SystemReportFactory.GoodsOnHandId);

            // Export button is always visible for Goods on Hand
            self.ReportInterfaceModel.ExportVisible = ko.computed( function() { return true; });

            // Export Callback function on GoodsOnHandModel
            self.ReportInterfaceModel.ExportCallback = function() {
                self.ReportDataModel.ExportDetailCallback("download-frame");
            };
        }
        
        if (self.ReportTypeId() == self.ProfitabilityId) {
            self.ReportInterfaceModel.DefaultReportId(@SystemReportFactory.OverallProfitabilityId);

            // Export only visible for Profitability in the Detail Views
            self.ReportInterfaceModel.ExportVisible = ko.computed( 
                function() { return self.ReportDataModel.SummaryActive() == false; });

            self.ReportInterfaceModel.ExportCallback = function() {
                self.ReportDataModel.ExportDetailCallback("download-frame");
            };
        }

        // State changes to the Report Selection
        self.SelectReportByReportId = function (id) {
            var report =
                AQ(self.ReportList())
                    .firstOrDefault(function (item) { return item.PwReportId == id; });

            if (report != null) {
                self.ReportInterfaceModel.LoadReport(report.PwReportId);
            }
        };

        self.SelectReportClick = function (data) {
            var reportId = data.PwReportId;
            self.ReportInterfaceModel.LoadReport(reportId);
        };


        // Transition to show Report Editor
        self.EditReportClick = function () {
            flow.exec(
                function() {
                    self.ReportInterfaceModel.MakeCopyForEditing(this);
                },
                function() {
                    self.EditReportCallback(self.ReportInterfaceModel.ReportId());
                });
        };

        self.EditReportCallback = function (reportId) { };

        self.Initialize = function(reportId, callback) {
            flow.exec(
                function () {
                    self.RefreshReportList(this);
                },
                function () {
                    self.SelectReportByReportId(reportId);
                    self.InitializeLastAccessedCheck();
                    if (callback) {
                        callback();
                    }
                });
        };

        self.InitializeLastAccessedCheck = function () {
            var pingInteralMilliseconds = 15000;    // Please do not change!
            setInterval(self.LastAccessedCheck, pingInteralMilliseconds);
        };

        self.LastAccessedCheck = function () {
            flow.exec(
                function() {
                    var reportId = self.ReportInterfaceModel.ReportId();
                    var settings = new ProfitWiseFunctions.AjaxSettings();
                    settings.UseSpinner = false;
                    settings.ErrorCallbackFunction = null;
                    var ajax = new ProfitWiseFunctions.Ajax(settings);
                    ajax.HttpPost("/ReportService/Accessed", { reportId: reportId }, this);
                },
                function(data) {
                    if (!data.exists) {
                        location.reload();
                    }
                });
        };

        return self;
    };
</script>
<script id="Report-Manager-Model">
    var ProfitWiseWidgets = ProfitWiseWidgets || {};

    // Requires a reference to a InFilterEditMode observable
    ProfitWiseWidgets.ReportManagerModel = function (reportTypeId) {
        var self = this;

        self.InFilterEditMode = ko.observable(false);

        self.ReportViewerModel = new ProfitWiseWidgets.ReportViewerModel(reportTypeId); 
        self.ReportEditorModel = new ProfitWiseWidgets.ReportEditorModel(reportTypeId);

        // To be configured by the parent/owner object
        self.ReportViewerModel.EditReportCallback = function (reportId) {
            self.InFilterEditMode(true);
            self.ReportEditorModel.LoadReport(reportId);
        };

        self.ReportEditorModel.OkCallback = function () {
            self.InFilterEditMode(false);
            self.ReportViewerModel.ReportInterfaceModel.LoadReport(self.ReportEditorModel.ReportId());
        };

        self.ReportEditorModel.CancelCallback = function () {
            self.InFilterEditMode(false);
        };

        self.Initialize = function (reportId) {
            self.InFilterEditMode(false);
            self.ReportViewerModel.Initialize(reportId);
        };

        return self;
    };
</script>
