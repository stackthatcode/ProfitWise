@using ProfitWise.Data.Model

<script type="text/html" id="Report-Editor-Top-Level">
    <div id="report-editor-header-bottom">
        <!-- Move this to the Report Editor...? -->
        <div class="fixed-positioning-container" style="top: 145px;">
            <!-- Space -->
            <div class="standard-header-sleeve" style="height: 178px;">
                <div class="standard-header header-scrollfix standard-padding" style="overflow: visible;">

                    <!-- Report Editor component -->
                    <div data-bind="template: { name: 'Report-Editor-Header' }"></div>
                </div>
            </div>
        </div>
    </div>

    <div id="report-editor-header-top" class="fixed-positioning-container">
        <div class="standard-header-sleeve" style="height: 150px; border-bottom: 1px solid #FFF; background-color: teal;">
            
            <!-- This element will track with the scrollbar via JavaScript wiring to onscroll-->
            <div class="standard-header header-scrollfix standard-padding top-border-facade" style="overflow: visible; padding-top:20px;">
                <div class="col-xs-6 no-side-padding">
                    <div class="popover-container" data-bind="if: ReportContext">
                        <h4 style="display:inline-block; font-weight:700;" data-bind="text: ReportContext().Name"></h4>

                        <div style="margin-left:7px; display:inline-block; letter-spacing: 0.1em; font-size:0.9em; color:#888;">(EDITING)</div>
                    </div>
                </div>

                <div class="col-xs-6 no-side-padding">
                    <div class="pull-right" style="padding-top: 10px;">
                        <a href="#" class="btn btn-primary" style="width:100px; margin-left:10px;"
                           data-bind="click: OkButtonClick">
                            Ok <i class="glyphicon glyphicon-ok"></i>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="report-editor-body" class="container page-content-sleeve">
        <!-- Will move/transistion when the filters appear -->
        <div class="page-content" style="margin-top: 150px; padding-top: 30px; overflow: auto;">
            <div data-bind="template: { name: 'Report-Editor-Body' }" style="margin-top:140px;">
            </div>
        </div>
    </div>
</script>

<script type="text/html" id="Report-Editor-Header">
    <!-- Spacer - 15px -->
    <div class="vert-spacer" style="height: 15px;"></div>

    <!-- Nav tabs - 43px -->
    <div class="row-fluid" style="height: 43px;">
        <div class="col-xs-7 no-side-padding">
            <div style="overflow:auto; height:40px;">
                <ul class="nav nav-tabs" role="tablist" style="position: absolute; width: 100%;">
                    <li role="presentation" class="active">
                        <a href="#report-filter-product-type"
                           data-bind="click: ProductTypeClick"
                           aria-controls="home" role="tab" data-toggle="tab">Product Types</a>
                    </li>
                    <li role="presentation">
                        <a href="#report-filter-vendor"
                           data-bind="click: VendorClick"
                           aria-controls="profile" role="tab" data-toggle="tab">Vendors</a>
                    </li>
                    <li role="presentation">
                        <a href="#report-filter-product"
                           data-bind="click: MasterProductClick"
                           aria-controls="messages" role="tab" data-toggle="tab">Products</a>
                    </li>
                    <li role="presentation">
                        <a href="#report-filter-sku"
                           data-bind="click: SkuClick"
                           aria-controls="settings" role="tab" data-toggle="tab">Variants</a>
                    </li>
                </ul>
            </div>

            <!-- Tab panes -->
            <div class="tab-content" style="clear: both;">
                <!-- Height - 120px -->
                <div id="report-filter-product-type" role="tabpanel" class="tab-pane active reduced-padding"
                     data-bind="template: { name: 'Report-Editor-Header-Product-Type', data: ProductTypeFilterModel }">
                </div>
                <div id="report-filter-vendor" role="tabpanel" class="tab-pane reduced-padding"
                     data-bind="template: { name: 'Report-Editor-Header-Vendor', data: VendorFilterModel }">
                </div>
                <div id="report-filter-product" role="tabpanel" class="tab-pane reduced-padding"
                     data-bind="template: { name: 'Report-Editor-Header-Master-Product', data: MasterProductFilterModel }">
                </div>
                <div id="report-filter-sku" role="tabpanel" class="tab-pane reduced-padding"
                     data-bind="template: { name: 'Report-Editor-Header-Sku', data: SkuFilterModel }">
                </div>
            </div>
        </div>

        <div class="col-xs-5 no-side-padding" style="background-color:white; height: 300px; padding-left:45px; ">
            <div style="font-size:1.10em; height:40px; padding-top:8px; font-weight: 700;">Select Filters to add to your Report</div>
            
            <div data-bind="template: { name: 'Report-Selection-Preview', data: ReportSelectionCountPreviewModel }"></div>

            <p>Add or remove filters from Report, then hit "Ok" to view the updated results.</p>

            <div style="overflow-y:auto; height:300px;">
                <div data-bind="template: { name: 'Report-Editor-Filter-Bullpen', data: ReportFilterSummaryModel }"></div>
            </div>
        </div>
    </div>
</script>

<script type="text/html" id="Report-Editor-Body">
    <div data-bind="if: SelectedFilterModel() == ProductTypeFilterModel">
        <div data-bind="template: { name: 'Report-Editor-Body-Product-Type', data: ProductTypeFilterModel }"></div>
    </div>

    <div data-bind="if: SelectedFilterModel() == VendorFilterModel">
        <div data-bind="template: { name: 'Report-Editor-Body-Vendor', data: VendorFilterModel }"></div>
    </div>

    <div data-bind="if: SelectedFilterModel() == MasterProductFilterModel">
        <div data-bind="template: { name: 'Report-Editor-Body-Master-Product', data: MasterProductFilterModel }"></div>
    </div>

    <div data-bind="if: SelectedFilterModel() == SkuFilterModel">
        <div data-bind="template: { name: 'Report-Editor-Body-Sku', data: SkuFilterModel }"></div>
    </div>
</script>


<script>
    ProfitWiseWidgets = ProfitWiseWidgets || {};

    // Bind the C# internal name
    ProfitWiseWidgets.ProductTypeFilter = "@PwReportFilter.ProductType";
    ProfitWiseWidgets.VendorFilter = "@PwReportFilter.Vendor";
    ProfitWiseWidgets.ProductFilter = "@PwReportFilter.Product";
    ProfitWiseWidgets.SkuFilter = "@PwReportFilter.Sku";

    ProfitWiseWidgets.ReportEditorModel = function () {
        var self = this;
        self.ReportId = ko.observable();
        self.ReportContext = ko.observable();
        
        // Wire in the individual Report Editor modules
        self.ProductTypeFilterModel =
                new ProfitWiseWidgets.ReportFilterModel(
                    ProfitWiseWidgets.ProductTypeFilter, 
                    "Search by Product Type...",
                    "/FilterService/ProductTypes");
        self.ProductTypeFilterModel.RegisterNotifyCallback(
                function() {
                    self.RefreshFilterSummaryAndCount();
                });

        self.VendorFilterModel =
                new ProfitWiseWidgets.ReportFilterModel(
                    ProfitWiseWidgets.VendorFilter,
                    "Search by Vendor...",
                    "/FilterService/Vendors");
        self.VendorFilterModel.RegisterNotifyCallback(
                function () {
                    self.RefreshFilterSummaryAndCount();
                });

        self.MasterProductFilterModel =
                new ProfitWiseWidgets.ReportFilterModel(
                    ProfitWiseWidgets.ProductFilter, 
                    "Search by Title and Vendor",
                    "/FilterService/MasterProducts");
        self.MasterProductFilterModel.RegisterNotifyCallback(
                function () {
                    self.RefreshFilterSummaryAndCount();
                });
        self.MasterProductFilterModel.RegisterSearchTextFunction(
                function (item, searchText) {
                        return ProfitWiseFunctions.CaseInsensitiveContains(item.Title, searchText) ||
                            ProfitWiseFunctions.CaseInsensitiveContains(item.Vendor, searchText);
                    });
        
        self.SkuFilterModel =
                new ProfitWiseWidgets.ReportFilterModel(
                    ProfitWiseWidgets.SkuFilter, 
                    "Search by Title, Vendor or SKU",
                    "/FilterService/Skus");
        self.SkuFilterModel.RegisterNotifyCallback(
                function () {
                    self.RefreshFilterSummaryAndCount();
                });
        self.SkuFilterModel.RegisterSearchTextFunction(
                function (item, searchText) {
                    return ProfitWiseFunctions.CaseInsensitiveContains(item.Title, searchText) ||
                                    ProfitWiseFunctions.CaseInsensitiveContains(item.Vendor, searchText) ||
                                    ProfitWiseFunctions.CaseInsensitiveContains(item.Sku, searchText) ||
                                    ProfitWiseFunctions.CaseInsensitiveContains(item.ProductTitle, searchText);
                });        

        var filterModelByFilterType = function (filterType) {
            if (filterType == ProfitWiseWidgets.ProductTypeFilter) {
                return self.ProductTypeFilterModel;
            }
            if (filterType == ProfitWiseWidgets.VendorFilter) {
                return self.VendorFilterModel;
            }
            if (filterType == ProfitWiseWidgets.ProductFilter) {
                return self.MasterProductFilterModel;
            }
            if (filterType == ProfitWiseWidgets.SkuFilter) {
                return self.SkuFilterModel;
            }
        };

        // Which ever of the Product Type, Vendor, Master Product or Sku models is active will be here
        self.SelectedFilterModel = ko.observable();
        self.SelectedFilterModelType = ko.computed(function () {
            return self.SelectedFilterModel() ? self.SelectedFilterModel().FilterType() : "";
        });

        // Filter Summary and Selection Preview models...
        self.ReportSelectionCountPreviewModel = new ProfitWiseWidgets.ReportSelectionCountPreviewModel();        
        self.ReportFilterSummaryModel = new ProfitWiseWidgets.ReportFilterSummaryModel();
        self.ReportFilterSummaryModel.RegisterRemoveCallback(function (filterType, key) {
            var filterModel = filterModelByFilterType(filterType);
            filterModel
                .SelectionModel
                .SetCheckedItemByKey(key, false);
            self.ReportSelectionCountPreviewModel.Refresh();
        });

        // Assumes the following interfaces: Refresh(reportId, callback), FilterType
        self.ClickOnNewFilterTab = function (newFilterModel, bootstrapTabHref) {
            flow.exec(
                function () {
                    self.SelectedFilterModel(newFilterModel);
                    self.SelectedFilterModel().Refresh(this);
                },
                function () {
                    self.RefreshSelectionsFromSummary(self.SelectedFilterModelType());
                    ProfitWiseFunctions.BsActivateTab(bootstrapTabHref);
                    $('html,body').animate({ scrollTop: 0 });
                }
            );
        };

        self.ProductTypeClick = function () {
            self.ClickOnNewFilterTab(self.ProductTypeFilterModel, "report-filter-product-type");
        };

        self.VendorClick = function () {
            self.ClickOnNewFilterTab(self.VendorFilterModel, "report-filter-vendor");
        };

        self.MasterProductClick = function () {
            self.ClickOnNewFilterTab(self.MasterProductFilterModel, "report-filter-product");
        };

        self.SkuClick = function () {
            self.ClickOnNewFilterTab(self.SkuFilterModel, "report-filter-sku");
        };


        // Report data bootstrapping function
        self.RefreshFilterSummaryAndCount = function (callback) {
            flow.exec(
                function () {
                    self.ReportFilterSummaryModel.Refresh(this);
                },
                function () {
                    self.ReportSelectionCountPreviewModel.Refresh(this);
                },
                function () {
                    if (callback) {
                        callback();
                    }
                });
        };

        self.RefreshSelectionsFromSummary = function (filterType) {
            var filtersByType =
                self.ReportFilterSummaryModel.GetFiltersByType(filterType);

            var filterKeys =
                AQ(filtersByType)
                    .select(function (item) { return item.Key })
                    .toArray();

            self.SelectedFilterModel()
                .SelectionModel
                .SetCheckedItemsByKeyArray(filterKeys, true);
        };

        self.LoadReport = function (reportId) {
            flow.exec(
                function() {
                    self.ReportId(reportId);
                    self.ProductTypeFilterModel.ReportId(reportId);
                    self.VendorFilterModel.ReportId(reportId);
                    self.MasterProductFilterModel.ReportId(reportId);
                    self.SkuFilterModel.ReportId(reportId);

                    self.ReportSelectionCountPreviewModel.ReportId(reportId);
                    self.ReportFilterSummaryModel.ReportId(reportId);
                    
                    self.RefreshFilterSummaryAndCount(this);
                },
                function() {
                    var ajax = new ProfitWiseFunctions.Ajax();
                    ajax.HttpGet("/ReportService/Report?reportId=" + reportId, this);
                },
                function (report) {
                    self.ReportContext(report.current);
                    self.ProductTypeClick();
                });
        };
        
        self.OkCallback = function () { };

        self.OkButtonClick = function () {
            self.SelectedFilterModel().SelectionModel.UncheckAllItems();
            self.OkCallback();
        };

        return self;
    };
</script>

