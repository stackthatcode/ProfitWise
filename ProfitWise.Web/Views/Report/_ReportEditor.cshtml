@using ProfitWise.Data.Model.Reports
@using ProfitWise.Data.Model.Shop
@using ProfitWise.Web.Attributes

<script type="text/html" id="Report-Editor-Top-Level">
    <div class="std-outer-padding" style="padding-top:20px;">
        <div style="background-color:#FFF; overflow:auto;" class="shadow">
            <div class="std-inner-padding">
                <div style="height: 110px;">            
                    <div style="overflow: visible; padding-top:20px;">
                        <div class="col-xs-6 no-side-padding">
                            <div class="popover-container" data-bind="if: ReportContext">
                                <h2 class="report-title overflow-gracefully"  data-bind="text: ReportContext().Name"></h2>
                                <div style="display:inline-block; letter-spacing: 0.1em; font-size:0.9em; color:#888;">(EDITING)</div>
                            </div>
                        </div>

                        <div class="col-xs-6 no-side-padding">
                            <div class="pull-right" style="padding-top: 20px;">
                                <a href="#" id="editor-done-button" 
                                   class="btn btn-primary" style="width:150px; margin-left:10px;"
                                   data-bind="click: OkButtonClick">
                                    Done <i class="glyphicon glyphicon-ok"></i>
                                </a>
                            </div>
                        </div>
                        
                        <div class="visible-xs visible-sm col-xs-12 no-side-padding">
                            <p>
                                <span data-bind="template: { name: 'Report-Editor-Filter-Summary-Condensed', 
                                                data: FilterBullpenModel }"></span>
                                <span data-bind="template: { name: 'Report-Selection-Preview', 
                                                data: ProductCountModel }"></span>
                                Add or remove filters from Report, then hit <strong>Done</strong> to view the updated results.
                            </p>
                        </div>
                    </div>
                </div>

                <div style="min-height:300px;">
                    <div style="height: 15px;"></div>
                    <div class="row" style="height: 43px;">
                        <div class="col-xs-12 col-sm-12 col-md-7">
                            <div id="filter-type-tabs" style="overflow:visible; height:40px;">
                                <ul class="nav nav-tabs" role="tablist" style="width: 100%;">
                                    <li role="presentation" class="active">
                                        <a href="#report-filter-product-type" data-bind="click: ProductTypeClick"
                                           aria-controls="home" role="tab" data-toggle="tab">Product Types</a>
                                    </li>
                                    <li role="presentation">
                                        <a href="#report-filter-vendor" data-bind="click: VendorClick"
                                           aria-controls="profile" role="tab" data-toggle="tab">Vendors</a>
                                    </li>
                                    <!-- ko if: ReportTypeId() == @ReportType.Profitability -->
                                    <li role="presentation">
                                        <a href="#report-filter-master-product" data-bind="click: MasterProductClick"
                                           aria-controls="messages" role="tab" data-toggle="tab">Products</a>
                                    </li>
                                    <li role="presentation">
                                        <a href="#report-filter-master-variant" data-bind="click: MasterVariantClick"
                                           aria-controls="settings" role="tab" data-toggle="tab">Variants</a>
                                    </li>
                                    <!-- /ko -->
                                    <!-- ko if: ReportTypeId() == @ReportType.GoodsOnHand -->
                                    <li role="presentation">
                                        <a href="#report-filter-product" data-bind="click: ProductClick"
                                           aria-controls="messages" role="tab" data-toggle="tab">Products</a>
                                    </li>
                                    <li role="presentation">
                                        <a href="#report-filter-variant" data-bind="click: VariantClick"
                                           aria-controls="settings" role="tab" data-toggle="tab">Variants</a>
                                    </li>
                                    <!-- /ko -->
                                </ul>
                            </div>

                            <div class="tab-content" style="clear: both;">
                                <div id="report-filter-product-type" role="tabpanel" class="tab-pane active reduced-padding"
                                     data-bind="template: { name: 'Report-Editor-Header-Product-Type', data: ProductTypeFilterModel }">
                                </div>
                                <div id="report-filter-vendor" role="tabpanel" class="tab-pane reduced-padding"
                                     data-bind="template: { name: 'Report-Editor-Header-Vendor', data: VendorFilterModel }">
                                </div>
                                <div id="report-filter-master-product" role="tabpanel" class="tab-pane reduced-padding"
                                     data-bind="template: { name: 'Report-Editor-Header-Master-Product', data: MasterProductFilterModel }">
                                </div>
                                <div id="report-filter-master-variant" role="tabpanel" class="tab-pane reduced-padding"
                                     data-bind="template: { name: 'Report-Editor-Header-Master-Variant', data: MasterVariantFilterModel }">
                                </div>

                                <div id="report-filter-product" role="tabpanel" class="tab-pane reduced-padding"
                                     data-bind="template: { name: 'Report-Editor-Header-Product', data: ProductFilterModel }">
                                </div>
                                <div id="report-filter-variant" role="tabpanel" class="tab-pane reduced-padding"
                                     data-bind="template: { name: 'Report-Editor-Header-Variant', data: VariantFilterModel }">
                                </div>
                            </div>

                            <div id="report-editor-body" data-bind="template: { name: 'Report-Editor-Body' }">
                            </div>
                        </div>

                        <div class="visible-lg visible-md col-md-5 increased-side-padding">
                            <div style="font-size:1.0em; padding-top:8px; font-weight: 700; letter-spacing: 0.2em; text-transform: uppercase;">
                                Select Filters to add to your Report
                            </div>
                            <p>
                                <span data-bind="template: { name: 'Report-Selection-Preview', data: ProductCountModel }"></span>
                                Add or remove filters from Report, then hit <strong>Done</strong> to view the updated results.
                            </p>
                            <div id="filter-bullpen" data-bind="template: { 
                                    name: 'Report-Editor-Filter-Bullpen',
                                    data: FilterBullpenModel }"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</script>

<script type="text/html" id="Report-Editor-Top-Filter-Summary">

</script>

<script type="text/html" id="Report-Editor-Body">
    <div data-bind="if: SelectedFilterModel() == ProductTypeFilterModel">
        <div data-bind="template: { name: 'Report-Editor-Body-Product-Type', data: ProductTypeFilterModel }"></div>
    </div>

    <div data-bind="if: SelectedFilterModel() == VendorFilterModel">
        <div data-bind="template: { name: 'Report-Editor-Body-Vendor', data: VendorFilterModel }"></div>
    </div>

    <div data-bind="if: SelectedFilterModel() == MasterProductFilterModel">
        <div data-bind="template: { name: 'Report-Editor-Body-Master-Product', data: MasterProductFilterModel }"></div>
    </div>

    <div data-bind="if: SelectedFilterModel() == MasterVariantFilterModel">
        <div data-bind="template: { name: 'Report-Editor-Body-Master-Variant', data: MasterVariantFilterModel }"></div>
    </div>

    <div data-bind="if: SelectedFilterModel() == ProductFilterModel">
        <div data-bind="template: { name: 'Report-Editor-Body-Product', data: ProductFilterModel }"></div>
    </div>

    <div data-bind="if: SelectedFilterModel() == VariantFilterModel">
        <div data-bind="template: { name: 'Report-Editor-Body-Variant', data: VariantFilterModel }"></div>
    </div>
</script>

<script>
    ProfitWiseWidgets = ProfitWiseWidgets || {};

    // Bind the C# internal name
    ProfitWiseWidgets.ProductTypeFilter = "@PwReportFilter.ProductType";
    ProfitWiseWidgets.VendorFilter = "@PwReportFilter.Vendor";
    ProfitWiseWidgets.MasterProductFilter = "@PwReportFilter.MasterProduct";
    ProfitWiseWidgets.MasterVariantFilter = "@PwReportFilter.MasterVariant";
    ProfitWiseWidgets.ProductFilter = "@PwReportFilter.Product";
    ProfitWiseWidgets.VariantFilter = "@PwReportFilter.Variant";

    ProfitWiseWidgets.ReportEditorModel = function (reportTypeId) {
        var self = this;
        self.ReportId = ko.observable();
        self.ReportContext = ko.observable();
        self.ReportTypeId = ko.observable(reportTypeId);

        // Wire in the individual Report Editor modules
        self.ProductTypeFilterModel =
                new ProfitWiseWidgets.ReportFilterModel(
                    ProfitWiseWidgets.ProductTypeFilter,
                    "Search by Product Type...",
                    "/FilterService/ProductTypes");
        self.ProductTypeFilterModel.RegisterNotifyCallback(
                function () {
                    self.RefreshFilterBullpenAndCount();
                });

        self.VendorFilterModel =
                new ProfitWiseWidgets.ReportFilterModel(
                    ProfitWiseWidgets.VendorFilter,
                    "Search by Vendor...",
                    "/FilterService/Vendors");
        self.VendorFilterModel.RegisterNotifyCallback(
                function () {
                    self.RefreshFilterBullpenAndCount();
                });

        self.MasterProductFilterModel =
                new ProfitWiseWidgets.ReportFilterModel(
                    ProfitWiseWidgets.MasterProductFilter,
                    "Search by Title and Vendor",
                    "/FilterService/MasterProducts");
        self.MasterProductFilterModel.RegisterNotifyCallback(
                function () {
                    self.RefreshFilterBullpenAndCount();
                });
        self.MasterProductFilterModel.RegisterSearchTextFunction(
                function (item, searchText) {
                    return ProfitWiseFunctions.CaseInsensitiveContains(item.Title, searchText) ||
                        ProfitWiseFunctions.CaseInsensitiveContains(item.Vendor, searchText);
                });

        self.MasterVariantFilterModel =
                new ProfitWiseWidgets.ReportFilterModel(
                    ProfitWiseWidgets.MasterVariantFilter,
                    "Search by Title, Vendor or SKU",
                    "/FilterService/MasterVariants");
        self.MasterVariantFilterModel.RegisterNotifyCallback(
                function () {
                    self.RefreshFilterBullpenAndCount();
                });
        self.MasterVariantFilterModel.RegisterSearchTextFunction(
                function (item, searchText) {
                    return ProfitWiseFunctions.CaseInsensitiveContains(item.Title, searchText) ||
                        ProfitWiseFunctions.CaseInsensitiveContains(item.Vendor, searchText) ||
                        ProfitWiseFunctions.CaseInsensitiveContains(item.Sku, searchText) ||
                        ProfitWiseFunctions.CaseInsensitiveContains(item.ProductTitle, searchText);
                });

        self.ProductFilterModel =
                new ProfitWiseWidgets.ReportFilterModel(
                    ProfitWiseWidgets.ProductFilter,
                    "Search by Title and Vendor",
                    "/FilterService/Products");
        self.ProductFilterModel.RegisterNotifyCallback(
                function () {
                    self.RefreshFilterBullpenAndCount();
                });
        self.ProductFilterModel.RegisterSearchTextFunction(
                function (item, searchText) {
                    return ProfitWiseFunctions.CaseInsensitiveContains(item.Title, searchText) ||
                        ProfitWiseFunctions.CaseInsensitiveContains(item.Vendor, searchText);
                });

        self.VariantFilterModel =
                new ProfitWiseWidgets.ReportFilterModel(
                    ProfitWiseWidgets.VariantFilter,
                    "Search by Title, Vendor or SKU",
                    "/FilterService/Variants");
        self.VariantFilterModel.RegisterNotifyCallback(
                function () {
                    self.RefreshFilterBullpenAndCount();
                });
        self.VariantFilterModel.RegisterSearchTextFunction(
                function (item, searchText) {
                    return ProfitWiseFunctions.CaseInsensitiveContains(item.Title, searchText) ||
                        ProfitWiseFunctions.CaseInsensitiveContains(item.Vendor, searchText) ||
                        ProfitWiseFunctions.CaseInsensitiveContains(item.Sku, searchText) ||
                        ProfitWiseFunctions.CaseInsensitiveContains(item.ProductTitle, searchText);
                });

        var filterModelByFilterType = function (filterType) {
            if (filterType == ProfitWiseWidgets.ProductTypeFilter) {
                return self.ProductTypeFilterModel;
            }
            if (filterType == ProfitWiseWidgets.VendorFilter) {
                return self.VendorFilterModel;
            }
            if (filterType == ProfitWiseWidgets.MasterProductFilter) {
                return self.MasterProductFilterModel;
            }
            if (filterType == ProfitWiseWidgets.MasterVariantFilter) {
                return self.MasterVariantFilterModel;
            }
            if (filterType == ProfitWiseWidgets.ProductFilter) {
                return self.ProductFilterModel;
            }
            if (filterType == ProfitWiseWidgets.VariantFilter) {
                return self.VariantFilterModel;
            }
        };

        // Which ever of the Product Type, Vendor, Master Product or Sku models is active will be here
        self.SelectedFilterModel = ko.observable();
        self.SelectedFilterModelType = ko.computed(function () {
            return self.SelectedFilterModel() ? self.SelectedFilterModel().FilterType() : "";
        });

        // Filter Bullpen and Selection Preview models...
        self.ProductCountModel = new ProfitWiseWidgets.ProductCountModel();

        self.FilterBullpenModel = new ProfitWiseWidgets.FilterBullpenModel(self.ReportTypeId());
        self.FilterBullpenModel.RegisterRemoveCallback(function (filterType, key) {
            var filterModel = filterModelByFilterType(filterType);

            filterModel
                .SelectionModel
                .SetCheckedItemByKey(key, false);

            self.ProductCountModel.Refresh();
        });

        // Assumes the following interfaces: Refresh(reportId, callback), FilterType
        self.ClickOnNewFilterTab = function (newFilterModel, bootstrapTabHref) {
            flow.exec(
                function () {
                    self.SelectedFilterModel(newFilterModel);
                    self.SelectedFilterModel().SearchAndPagingModel.ClearSearchText();
                    self.SelectedFilterModel().Refresh(this);
                },
                function () {
                    self.RefreshSelectionsFromSummary(self.SelectedFilterModelType());
                    ProfitWiseFunctions.BsActivateTab(bootstrapTabHref);
                    $('html,body').animate({ scrollTop: 0 });
                }
            );
        };

        self.ProductTypeClick = function () {
            self.ClickOnNewFilterTab(self.ProductTypeFilterModel, "report-filter-product-type");
        };

        self.VendorClick = function () {
            self.ClickOnNewFilterTab(self.VendorFilterModel, "report-filter-vendor");
        };

        self.MasterProductClick = function () {
            self.ClickOnNewFilterTab(self.MasterProductFilterModel, "report-filter-master-product");
        };

        self.MasterVariantClick = function () {
            self.ClickOnNewFilterTab(self.MasterVariantFilterModel, "report-filter-master-variant");
        };

        self.ProductClick = function () {
            self.ClickOnNewFilterTab(self.ProductFilterModel, "report-filter-product");
        };

        self.VariantClick = function () {
            self.ClickOnNewFilterTab(self.VariantFilterModel, "report-filter-variant");
        };

        // Report data bootstrapping function
        self.RefreshFilterBullpenAndCount = function (callback) {
            flow.exec(
                function () {
                    self.FilterBullpenModel.Refresh(this);
                },
                function () {
                    self.ProductCountModel.Refresh(this);
                },
                function () {
                    if (callback) {
                        callback();
                    }
                });
        };

        self.RefreshSelectionsFromSummary = function (filterType) {
            var filtersByType =
                self.FilterBullpenModel.GetFiltersByType(filterType);

            var filterKeys =
                AQ(filtersByType)
                    .select(function (item) { return item.Key })
                    .toArray();

            self.SelectedFilterModel()
                .SelectionModel
                .SetCheckedItemsByKeyArray(filterKeys, true);
        };

        self.LoadReport = function (reportId) {
            flow.exec(
                function () {
                    self.ReportId(reportId);

                    self.ProductTypeFilterModel.ReportId(reportId);
                    self.VendorFilterModel.ReportId(reportId);
                    self.MasterProductFilterModel.ReportId(reportId);
                    self.MasterVariantFilterModel.ReportId(reportId);
                    self.ProductFilterModel.ReportId(reportId);
                    self.VariantFilterModel.ReportId(reportId);

                    self.ProductCountModel.ReportId(reportId);
                    self.FilterBullpenModel.ReportId(reportId);

                    self.RefreshFilterBullpenAndCount(this);
                },
                function () {
                    var ajax = new ProfitWiseFunctions.Ajax();
                    ajax.HttpGet("/ReportService/Report?reportId=" + reportId, this);
                },
                function (report) {
                    self.ReportContext(report.current);
                    self.ProductTypeClick();

                    var tourStateJs = @Html.Raw(Context.CurrentUserTourStateJson());
                    if (tourStateJs[@TourIdentifiers.ShowEditFilters]) {
                        ProfitWiseFunctions.ShowTour(@TourIdentifiers.ShowEditFilters);
                        ProfitWiseWidgets.ReportEditorTour.init();
                        ProfitWiseWidgets.ReportEditorTour.start();
                    }
                });
        };

        self.OkCallback = function () { };

        self.OkButtonClick = function () {
            self.SelectedFilterModel().SelectionModel.UncheckAllItems();
            self.OkCallback();
        };

        return self;
    };

    var steps = [
        {
            element: "#filter-type-tabs",
            placement: "bottom",
            title: "Filter types",
            content: "These tabs allow you to choose different types of filters to add to your report. You can filter by Product Type, Vendor, Product or Variant. Multiple filters can be combined. Selecting specific filters will limit the results shown in subsequent filter views according to your selections."
        },
        {
            element: "#report-editor-body",
            placement: "top",
            title: "Selecting filters",
            content: "Click on individual items in the results list to add those items to the current filter set. The selected filters will appear in blue bubbles on the right side of your screen."
        },
        {
            element: ".filter-search",
            placement: "bottom",
            title: "Search box",
            content: "Each filter type has a search field so you can quickly search for Product Types, Vendors, Products or Variants (depending on which tab you have selected). Enter a search term and click 'Go!' to execute the search."
        },
        {
            element: "#filter-bullpen",
            placement: "top",
            title: "Filter summary",
            content: "The filters summary provides an overview of which filters are currently selected, as well as the resulting number of products and variants that will be included in the report as a result of these filters."
        },
        {
            element: "#editor-done-button",
            placement: "bottom",
            title: "Done",
            content: "When you're finished setting up your filters, click here to return to the Profitability Dashboard and view your filtered report."
        },
    ];

    ProfitWiseWidgets.ReportEditorTour = ProfitWiseFunctions.TourFactory(steps);

</script>

