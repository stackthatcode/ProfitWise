@Html.Partial("~/Views/UserMain/_FilterPagingWidget.cshtml")

<script type="text/html" id="Report-Editor-Header-Vendor">
    <div class="row-fluid">
        <div class="col-xs-8 no-side-padding">
            <div data-bind="template: { name: 'Filter-Paging-Widget', data: $data.FilterModel }"></div>
        </div>
        <div class="col-xs-4"></div>
    </div>

    <div class="row-fluid">
        <div class="col-xs-8 no-side-padding" 
             style="border-top: 1px dashed #CCC;"
             data-bind="if: $data.PageOfVendors().length">
            
            <!-- Move the Select all thingy outside, here -->
            <div data-bind="ifnot: SelectionModel.AllAreSelected">
                <a href="#" style="position:absolute; top:-40px; font-weight: 700;"
                   data-bind="click: SelectionModel.SelectAll">Select All</a>
            </div>
            <div data-bind="if: SelectionModel.AllAreSelected">
                <a href="#" style="position:absolute; top:-40px; font-weight: 700;"
                   data-bind="click: SelectionModel.DeselectAll">Deselect All</a>
            </div>
        </div>

        <div class="col-xs-1"></div>
        <div class="col-xs-3 no-side-padding" style="top:-120px; height: 250px;">
            <div style="padding:20px;">
                <p style="font-weight:700; color:#666; font-size:1.2em;">Select the Vendors to include in your Report</p>

                <div style="height:65px;">
                    <p style="font-size:0.95em;">Displayed results will only include data from selected Vendors.</p>
                </div>

                <p><a href="#" data-bind="click: GotoNextCallback" class="btn btn-default">Next &gt;&gt;</a></p>
            </div>
        </div>
    </div>
</script>

<script type="text/html" id="Report-Editor-Body-Vendor">
    <div class="row-fluid">
        <div class="col-xs-8 reduced-padding">
            
            <div data-bind="if: PageOfVendors().length == 0">
                <div data-bind="template: { name: 'Report-Editor-Empty-Results', data: { ItemDescription: 'Vendors' } }"></div>               
            </div>

            <table id="product-types" class="table" style="width: 100%; height: 100%; margin: 0;">
                <tbody data-bind="foreach: PageOfVendors">
                <tr style="border-top: 0;">
                    <td>
                        <input class="form-control"
                                type="checkbox" 
                                style="height: 15px; width: 15px;" 
                                data-bind="checked: $data.IsChecked, click: $parent.CheckboxClick"  />
                    </td>

                    <td data-bind="text: $data.CorrectedVendor"></td>
                    <td>(<span data-bind="text: $data.Count"></span> Products)</td>
                </tr>
                </tbody>
            </table>
        </div>
        <div class="col-xs-4">
        </div>
    </div>
</script>

<script>
    ProfitWiseWidgets.ReportVendorModel = function (parent) {
        var self = this;
        self.Parent = parent;
        self.ReportId = ko.observable();

        // Data
        self.Vendors = ko.observableArray();
        self.PageOfVendors = ko.observableArray();

        // Selections
        self.SelectionModel = new ProfitWiseWidgets.SelectionModel();
        self.SelectionModel.Callback = function() {
            self.ApplyFiltersAndPaging();
        }

        // Paging and Filtering model
        self.FilterModel = new ProfitWiseWidgets.FilterPagingWidgetModel();
        self.FilterModel.PlaceHolderText("Search for Vendors...");
        self.FilterModel.RegisterRefreshCallback(function () {
            self.ApplyFiltersAndPaging();
        });

        self.FilterModel.SetPageSize(5);

        self.CheckboxClick = function(data) {
            self.SelectionModel.ToggleSelect(data.Vendor);
            return true;
        };

        self.AddObservables = function(data) {
            AQ(data)
                .each(function (item) {
                    item.IsChecked = ko.computed(function () {
                        return self.SelectionModel.IsSelected(item.Vendor);
                    });

                    item.CorrectedVendor = ko.computed(function () {
                        return item.Vendor == "" ? "(No Vendor)" : item.Vendor;
                    });
                });
        };
        
        self.Refresh = function (reportId) {
            self.ReportId(reportId);
            self.FilterModel.SetPageNumber(1);
            var ajax = new ProfitWiseFunctions.Ajax();
            
            flow.exec(
                function () {
                    ajax.HttpGet("/ReportService/Vendors?reportId=" + self.ReportId(), this);
                },
                function (data) {
                    self.AddObservables(data);
                    self.Vendors(data);
                    ajax.HttpGet("/ReportService/SelectedVendors?reportId=" + self.ReportId(), this);
                },
                function (data) {
                    self.SelectionModel.AllSelected(data.AllVendors);
                    self.SelectionModel.MarkedItems(data.MarkedVendors);
                    self.ApplyFiltersAndPaging();
                }
            );
        }

        self.Save = function() {
            flow.exec(
                function () {
                    var ajax = new ProfitWiseFunctions.Ajax();
                    var data = {
                        reportId: self.ReportId(),
                        selectAll: self.SelectionModel.AllSelected(),
                        markedVendors: self.SelectionModel.MarkedItems(),
                    };
                    ajax.HttpPost("/ReportService/SelectedVendors", data, this);
                },
                function(results) {
                });
        };

        self.ApplyFiltersAndPaging = function () {
            var searchText = self.FilterModel.SearchText() || "";
            var isShowAllSelected = self.FilterModel.IsShowAllSelected();

            var filteredVendors = self.Vendors();
            if (searchText.trim() != "") {
                filteredVendors =
                    AQ(filteredVendors)
                    .where(function (item) {
                        return ProfitWiseFunctions
                            .CaseInsensitiveContains(item.Vendor, searchText);
                    })
                    .toArray();
            }

            if (!isShowAllSelected) {
                filteredVendors =
                    AQ(filteredVendors)
                    .where(function (item) { return item.IsChecked() })
                    .toArray();
            }

            self.FilterModel.SetRecordCount(filteredVendors.length);

            var pageNumber = self.FilterModel.GetPageNumber();
            var skip = (pageNumber - 1) * self.FilterModel.GetPageSize();
            var take = self.FilterModel.GetPageSize();

            self.PageOfVendors(
                AQ(filteredVendors)
                .skip(skip)
                .take(take)
                .where(function(n) { return n != null })
                .toArray());
        };

        self.GotoNextCallback = function () { };
        self.GotoPreviousCallback = function () { };

        return self;
    };
</script>
