<!-- Requires KnockoutJS Bootstrap integration plugin Knockstrap -->

<script type="text/html" id="Paging-Widget-Popover">
    <!--<div id="pagination-popover-content"> <!-- style="display: none;"-->
    <div id="pagination-popover" class="input-group">
        <input type="text" class="form-control jump-to-page-class" placeholder="Jump to page number..." maxlength="5"
               data-bind="
                    value: JumpToPageNumericOnly, 
                    valueUpdate: 'afterkeydown', 
                    event: { focus: HighlightJumpToPage, keypress: JumpToPageOnEnter }" />

        <span class="input-group-btn">
            <button class="btn btn-primary" data-bind="click: JumpToPageFunction" type="button">Go!</button>
        </span>
    </div>
</script>

<script type="text/html" id="Paging-Widget">
    <div class="pull-right" style="margin-left: 15px;">
        <nav aria-label="Page navigation" class="pull-right paging-widget-popover">
            <ul class="pagination">
                <li>
                    <a href="#" aria-label="First" data-bind="click: First">
                        <span><i class="glyphicon glyphicon-backward"></i>&nbsp;</span>
                    </a>
                </li>
                <li>
                    <a href="#" aria-label="Backward" data-bind="click: Backward">
                        <span><i class="glyphicon glyphicon-step-backward"></i>&nbsp;</span>
                    </a>
                </li>
                <li>
                    <a href="#" id="pagination-popover-launcher" rel="popover"
                       data-bind="popover: { options: { placement: 'bottom', trigger: 'click',  },  template: 'Paging-Widget-Popover', data: $data }">
                        Page <span data-bind="text: PageNumber"></span> of <span data-bind="text: PageCount"></span></a>

                </li>
                <li>
                    <a href="#" aria-label="Forward" data-bind="click: Forward">
                        <span><i class="glyphicon glyphicon-step-forward"></i>&nbsp;</span>
                    </a>
                </li>
                <li>
                    <a href="#" aria-label="Last" data-bind="click: Last">
                        <span><i class="glyphicon glyphicon-forward"></i>&nbsp;</span>
                    </a>
                </li>
            </ul>
        </nav>
    </div>

    <div style="float: right; padding-top: 20px;">
        <div class="input-group pull-right;" style="width: 175px;">

            <select class="form-control" data-bind="value: PageSize, event:{ change: PageSizeChanged}">
                <option value="25">25</option>
                <option value="50">50</option>
                <option value="100">100</option>
                <option value="250">250</option>
            </select>

            <span class="input-group-addon" id="basic-addon2">per page</span>
        </div>
    </div>
</script>

<script type="text/javascript">
    var ProfitWiseWidgets = ProfitWiseWidgets || {};

    ProfitWiseWidgets.ClosePagingWidgetJumpToPage = function () {
        $('div.popover:visible').prev().click();
    }

    $(document).on("click", function (event) {
        if ($(event.target).closest(".paging-widget-popover").length == 0) {
            ProfitWiseWidgets.ClosePagingWidgetJumpToPage();
        }
    });
    
    ProfitWiseWidgets.PagingModel = function() {
        var self = this;

        self.RecordCount = ko.observable(0);
        self.PageNumber = ko.observable(1);
        self.PageSize = ko.observable(25);

        self.PageSizeChanged = function() {
            if (self.PageNumber() > self.PageCount()) {
                self.PageNumber(self.PageCount());
            }
            if (self.JumpToPage() > self.PageCount()) {
                self.JumpToPage(self.PageCount());
            }
            self.InvokeCallbackFunction();
        }

        self.JumpToPage = ko.observable(1);

        self.HighlightJumpToPage = function () {
            $(".jump-to-page-class").select();
        };


        self.JumpToPageNumericOnly = 
            ko.computed({
                read: function () {
                    var output = self.JumpToPage().toFixed(0);
                    // console.log("Reading to JumpToPage: " + output);
                    return output;
                },
                write: function (value) {
                    // console.log("Writing to EditUnitPrice: " + value);

                    // Strip out unwanted characters, parse as float, then write the raw data back to the underlying "price" observable
                    var parsedValue = parseFloat(value.replace(/[^\.\d]/g, ""));
                    var finalValue = isNaN(parsedValue) ? 1 : parsedValue;

                    if (finalValue > self.PageCount()) {
                        finalValue = self.PageCount();
                    }

                    if (finalValue < 1) {
                        finalValue = 1;
                    }
                    console.log("Writing to EditUnitPrice (final): " + finalValue);

                    
                    self.JumpToPage(finalValue); // Write to underlying storage
                    self.JumpToPage.notifySubscribers();
                    self.JumpToPageNumericOnly.notifySubscribers();
                },
                owner: self
            });

        self.JumpToPageOnEnter = function(model, event) {
            if (event.keyCode == 13) {
                self.JumpToPageFunction();
                return false;
            } else {
                return true;
            }
        };

        self.JumpToPageFunction = function() {
            self.PageNumber(self.JumpToPage());
            ProfitWiseWidgets.ClosePagingWidgetJumpToPage();
            self.InvokeCallbackFunction();
        };

        self.PageCount = ko.computed(function() {
            return self.RecordCount() / self.PageSize();
        });

        self.Forward = function() {
            if (self.PageNumber() < self.PageCount()) {
                self.PageNumber(self.PageNumber() + 1);
                self.InvokeCallbackFunction();
            }
        };

        self.Backward = function() {
            if (self.PageNumber() > 1) {
                self.PageNumber(self.PageNumber() - 1);
                self.InvokeCallbackFunction();
            }
        };

        self.First = function() {
            self.PageNumber(1);
            self.InvokeCallbackFunction();

        };

        self.Last = function() {
            self.PageNumber(self.PageCount());
            self.InvokeCallbackFunction();
        };

        self.CallbackFunction = function() {
        };

        self.InvokeCallbackFunction = function() {
            self.CallbackFunction(Number(self.PageNumber()), Number(self.PageSize()));
        };

        self.SubscribeCallbackFunction = function(callback) {
            self.CallbackFunction = callback;
        };

        return self;
    };
</script>

