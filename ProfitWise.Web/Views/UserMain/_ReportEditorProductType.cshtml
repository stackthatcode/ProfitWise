<script type="text/html" id="Report-Editor-Header-Product-Type">
    
    <div data-bind="if: ShowSplashPage">
        <div style="text-align: center; padding-top: 100px; padding-bottom: 150px;">
            <i style="font-size: 5.0em; color: #428bca;" class="glyphicon glyphicon-ok"></i>
            <h4 style="color: #777; font-weight: 700;">
                All Product Types are included in your Report
            </h4>
            <div style="color: #555;">There are currently no Product Type filters</div>
            <div style="padding-top:30px;">
                <a href="#"
                   style="width:120px;"
                   class="btn btn-primary"
                   data-bind="click: function() { ShowSplashPage(false); }">
                    <i class="glyphicon glyphicon-ok"></i> Add Filters
                </a>
                <a style="width:120px;" href="#" class="btn btn-default">Next &gt;&gt;</a>
            </div>
        </div>
    </div>

    <div data-bind="ifnot: ShowSplashPage">
        <div class="row-fluid">
            <div class="col-xs-8 no-side-padding" style="height: 120px;">
                <div data-bind="template: { name: 'Filter-Paging-Widget', data: $data.FilterModel }"></div>
            </div>

            <div class="col-xs-4"></div>
        </div>

        <div class="row-fluid">
            <div class="col-xs-8 no-side-padding" data-bind="if: $data.PageOfProductTypes().length">
                <div style="width: 100%; border-top: 1px dashed #CCC;"></div>
                <a href="#" style="position: absolute; top: -40px; font-weight: 700;"
                   data-bind="click: DeselectAll">Remove All Filters</a>
            </div>
            <div class="col-xs-1"></div>
            <div class="col-xs-3 no-side-padding" style="top: -20px; height: 250px;">
                <div style="padding: 20px;">
                    <p style="font-weight: 700; color: #666; font-size: 1.3em;">
                        Select Product Type filters for your Report
                    </p>
                    
                    <p>Your current Report is filtered by<br/>
                        <span style="font-weight: 800; color: #777;">
                            <span data-bind="text: CheckedItems().length"></span> Product Type(s).
                        </span></p>

                    <p>You can still <a href="#" data-bind="click: DeselectAll">remove all filters</a>.</p>
                    
                    <div style="padding-top:10px;">
                        <a href="#" data-bind="click: GotoNextCallback" class="btn btn-primary">Next &gt;&gt;</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</script>

<script type="text/html" id="Report-Editor-Body-Product-Type">
    <div class="row-fluid" style="min-height: 300px;">
        <div class="col-xs-8 reduced-padding">            
            <div data-bind="if: PageOfProductTypes().length == 0">
                <div data-bind="template: { name: 'Report-Editor-Empty-Results', data: { ItemDescription: 'Product Types' } }"></div>               
            </div>
            
            <table id="product-types" class="table" style="width: 100%; height: 100%; margin: 0;"
                   data-bind="ifnot: ShowSplashPage">
                <tbody data-bind="foreach: PageOfProductTypes">
                <tr style="border-top: 0;">
                    <td>                        
                        <input class="form-control"
                                   type="checkbox" 
                                   style="height: 15px; width: 15px;" 
                                   data-bind="checked: $data.IsChecked, click: $parent.CheckboxClick"  />
                    </td>

                    <td data-bind="text: $data.CorrectedProductType"></td>

                    <td>(<span data-bind="text: $data.Count"></span> Products)</td>
                </tr>
                </tbody>
            </table>
        </div>
        <div class="col-xs-4">
        </div>
    </div>
</script>

<script>
    ProfitWiseWidgets.ReportProductTypeModel = function (parent) {
        var self = this;
        self.Parent = parent;
        self.ReportId = ko.observable();

        // Data
        self.ProductTypes = ko.observableArray();
        self.FilteredProductTypes = ko.observableArray();
        self.PageOfProductTypes = ko.observableArray();
        
        // Paging and Filtering model
        self.FilterModel = new ProfitWiseWidgets.FilterPagingWidgetModel();
        self.FilterModel.PlaceHolderText("Search for Product Types...");
        self.FilterModel.RegisterRefreshCallback(function () {
            self.ApplyFiltersAndPaging();
        });
        self.FilterModel.SetPageSize(5);

        self.AllSelected = ko.observable(false);
        self.ShowSplashPage = ko.observable(true);

        self.AddObservables = function(data) {
            AQ(data)
                .each(function (item) {
                    item.IsChecked = ko.observable(true);
                    item.CorrectedProductType = ko.computed(function() {
                        return item.ProductType == "" ? "(No Product Type)" : item.ProductType;
                    });
                });
        };

        self.CheckboxClick = function (data) {
            //console.log(data.IsChecked());
            
            self.AllSelected(self.AllItemsAreSelected());
            self.ApplyFiltersAndPaging();
            return true;
        };

        self.AllItemsAreSelected = function () {
            var selectedCount = AQ(self.ProductTypes()).count(function (item) { return item.IsChecked() });
            return selectedCount == self.ProductTypes().length;
        };

        self.SelectAll = function() {
            AQ(self.FilteredProductTypes()).each(function (item) { item.IsChecked(true); });
            self.AllSelected(true);
        };

        self.DeselectAll = function() {
            AQ(self.FilteredProductTypes()).each(function (item) { item.IsChecked(false); });
            self.AllSelected(false);
            self.ShowSplashPage(true);
        };

        self.CheckedItems = function() {
            return AQ(self.ProductTypes())
                .where(function(item) { return item.IsChecked(); })
                .select(function(item) { return item.ProductType; })
                .toArray();
        };

        self.Refresh = function (reportId) {
            self.ReportId(reportId);
            self.FilterModel.SetPageNumber(1);
            var ajax = new ProfitWiseFunctions.Ajax();

            flow.exec(
                function () {
                    ajax.HttpGet("/ReportService/ProductTypes", this);
                },
                function (allItemsFromServer) {
                    self.AddObservables(allItemsFromServer);
                    self.ProductTypes(allItemsFromServer);
                    ajax.HttpGet("/ReportService/SelectedProductTypes?reportId=" + self.ReportId(), this);
                },
                function (selectionData) {                    
                    self.AllSelected(false);
                    AQ(selectionData.CheckedProductTypes)
                        .each(function (selectedItem) {
                            var item =
                                AQ(self.ProductTypes())
                                    .firstOrDefault(function (x) { return x.ProductType == selectedItem });

                            if (item != null) {
                                item.IsChecked(true);
                            }
                        });

                    self.ApplyFiltersAndPaging();
                }
            );
        }

        self.ApplyFiltersAndPaging = function () {
            var searchText = self.FilterModel.SearchText() || "";
            var isShowAllSelected = self.FilterModel.IsShowAllSelected();

            var filteredProductTypes = self.ProductTypes();
            if (searchText.trim() != "") {
                filteredProductTypes =
                    AQ(filteredProductTypes)
                        .where(function (item) {
                            return ProfitWiseFunctions
                                .CaseInsensitiveContains(item.ProductType, searchText);
                        })
                        .toArray();
            }

            if (!isShowAllSelected) {
                filteredProductTypes =
                    AQ(filteredProductTypes)
                    .where(function (item) { return item.IsChecked() })
                    .toArray();
            }

            self.FilteredProductTypes(filteredProductTypes);
            self.FilterModel.SetRecordCount(filteredProductTypes.length);

            var pageNumber = self.FilterModel.GetPageNumber();
            var skip = (pageNumber - 1) * self.FilterModel.GetPageSize();
            var take = self.FilterModel.GetPageSize();

            self.PageOfProductTypes(
                AQ(filteredProductTypes)
                .skip(skip)
                .take(take)
                .where(function (n) { return n != null })
                .toArray());
        };

        self.Save = function() {
            flow.exec(
                function () {
                    var ajax = new ProfitWiseFunctions.Ajax();
                    var data = {
                        reportId: self.ReportId(),
                        selectAll: self.AllSelected(),
                        checkedProductTypes: self.CheckedItems(),
                    };
                    ajax.HttpPost("/ReportService/SelectedProductTypes", data, this);
                },
                function(results) {
                });
        };


        self.GotoNextCallback = function () { };
        
        return self;
    };
</script>