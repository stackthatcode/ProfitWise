@using ProfitWise.Data.Model
@Html.Partial("~/Views/UserMain/_FilterPagingWidget.cshtml")
@Html.Partial("~/Views/UserMain/_SelectionModel.cshtml")
@Html.Partial("~/Views/UserMain/_ReportEditorCommonTemplates.cshtml")
@Html.Partial("~/Views/UserMain/_ReportEditorProductType.cshtml")
@Html.Partial("~/Views/UserMain/_ReportEditorVendor.cshtml")
@Html.Partial("~/Views/UserMain/_ReportEditorMasterProduct.cshtml")
@Html.Partial("~/Views/UserMain/_ReportEditorSku.cshtml")


<style>
    table#product-types td {
        height: 70px !important;
        font-size: 14px;
        vertical-align: middle !important;
    }

    table#product-types tr td:nth-child(1) {
        width: 10%;
    }
    table#product-types tr td:nth-child(2) {
        width: 45%;
    }
    table#product-types tr td:nth-child(3) {
        width: 45%;
    }
</style>

<script type="text/html" id="Report-Editor-Filter-Grid">
    <div style="margin-bottom:5px; font-size:0.8em; font-weight:700;">
        <span data-bind="text: label"></span>: <span data-bind="if: grid().length == 0"><span style="font-weight:400;">(none)</span></span>
    </div>
    <div data-bind="foreach: grid">
        <div class="filter-tag-container"
             style="display:inline-block; margin-bottom:5px;"
             data-bind="tooltip: { title: $data.Description, placement: 'bottom' }">

            <div class="filter-description">
                <span data-bind="text: $data.Title"></span>
            </div>

            <!-- Add a delete method here... -->
            <a class="filter-remove" href="#" data-bind="click: RemoveClick">
                &nbsp;
                <i class="glyphicon glyphicon-remove"></i>
            </a>
        </div>
    </div>
</script>

<!-- Requires a ReportEditorWidget passed in KO template "data" parameter -->
<script type="text/html" id="Report-Editor-Header">
    <!-- Spacer - 15px -->
    <div class="vert-spacer" style="height: 15px;"></div>

    <!-- Nav tabs - 43px -->
    <div class="row-fluid" style="height: 43px;">
        <div class="col-xs-7 no-side-padding">
            <div style="overflow:auto; height:40px;">
                <ul class="nav nav-tabs" role="tablist" style="position: absolute; width: 100%;">
                    <li role="presentation" class="active">
                        <a href="#report-filter-product-type"
                           data-bind="click: ProductTypeClick"
                           aria-controls="home" role="tab" data-toggle="tab">Product Types</a>
                    </li>
                    <li role="presentation">
                        <a href="#report-filter-vendor"
                           data-bind="click: VendorClick"
                           aria-controls="profile" role="tab" data-toggle="tab">Vendors</a>
                    </li>
                    <li role="presentation">
                        <a href="#report-filter-product"
                           data-bind="click: MasterProductClick"
                           aria-controls="messages" role="tab" data-toggle="tab">Products</a>
                    </li>
                    <li role="presentation">
                        <a href="#report-filter-sku"
                           data-bind="click: SkuClick"
                           aria-controls="settings" role="tab" data-toggle="tab">Variants</a>
                    </li>
                </ul>
            </div>

            <!-- Tab panes -->
            <div class="tab-content" style="clear: both;">
                <!-- Height - 120px -->
                <div id="report-filter-product-type" role="tabpanel" class="tab-pane active reduced-padding"
                     data-bind="template: { name: 'Report-Editor-Header-Product-Type', data: ReportProductTypeModel }">
                </div>
                <div id="report-filter-vendor" role="tabpanel" class="tab-pane reduced-padding"
                     data-bind="template: { name: 'Report-Editor-Header-Vendor', data: ReportVendorModel }">
                </div>
                <div id="report-filter-product" role="tabpanel" class="tab-pane reduced-padding"
                     data-bind="template: { name: 'Report-Editor-Header-Master-Product', data: ReportMasterProductModel }">
                </div>
                <div id="report-filter-sku" role="tabpanel" class="tab-pane reduced-padding"
                     data-bind="template: { name: 'Report-Editor-Header-Sku', data: ReportSkuModel }">
                </div>
            </div>
        </div>

        <div class="col-xs-5 no-side-padding" style="background-color:white; height: 300px; padding-left:45px; ">
            <div style="font-size:1.10em; height:40px; padding-top:8px; font-weight: 700;">Select Filters to add to your Report</div>
            
            <!-- Template for Product and Variant Count -->
            <span data-bind="template: { name: 'Report-Selection-Preview', data: ReportSelectionPreviewModel }"></span>

            <p>Select Filters to add to Report, then hit "Ok" when you're done.</p>

            <div style="margin-bottom:20px;">
                <a href="#" class="btn btn-primary btn-sm" style="width: 95px;" data-bind="click: CancelButtonClick">
                    Cancel &nbsp;<i class="glyphicon glyphicon-remove"></i>
                </a>

                <a href="#" class="btn btn-primary btn-sm" style="width: 95px;" data-bind="click: OkButtonClick">
                    Ok &nbsp;<i class="glyphicon glyphicon-ok"></i>
                </a>
            </div>

            <div style="overflow-y:auto; height:300px;">
                <div style="height:10px;"></div>
                <div data-bind="template: { name: 'Report-Editor-Filter-Grid',
                                        data: { label: 'Product Types Filters', grid: ProductTypesGrid } }"></div>

                <div style="height:10px;"></div>
                <div data-bind="template: { name: 'Report-Editor-Filter-Grid',
                                        data: { label: 'Vendor Filters', grid: VendorsGrid } }"></div>

                <div style="height:10px;"></div>
                <div data-bind="template: { name: 'Report-Editor-Filter-Grid',
                                        data: { label: 'Product Filters', grid: ProductsGrid } }"></div>

                <div style="height:10px;"></div>
                <div data-bind="template: { name: 'Report-Editor-Filter-Grid',
                                        data: { label: 'Variant Filters', grid: SkuGrid } }"></div>
            </div>
        </div>
    </div>
</script>

<!-- Requires a ReportEditorWidget passed in KO template "data" parameter -->
<script type="text/html" id="Report-Editor-Body">
    <div data-bind="if: SelectedFilterModel() == ReportProductTypeModel">
        <div data-bind="template: { name: 'Report-Editor-Body-Product-Type', data: ReportProductTypeModel }"></div>
    </div>

    <div data-bind="if: SelectedFilterModel() == ReportVendorModel">
        <div data-bind="template: { name: 'Report-Editor-Body-Vendor', data: ReportVendorModel }"></div>
    </div>

    <div data-bind="if: SelectedFilterModel() == ReportMasterProductModel">
        <div data-bind="template: { name: 'Report-Editor-Body-Master-Product', data: ReportMasterProductModel }"></div>
    </div>

    <div data-bind="if: SelectedFilterModel() == ReportSkuModel">
        <div data-bind="template: { name: 'Report-Editor-Body-Sku', data: ReportSkuModel }"></div>
    </div>
</script>

<script>
    ProfitWiseWidgets = ProfitWiseWidgets || {};

    ProfitWiseWidgets.ReportEditorModel = function () {
        var self = this;

        // Bind the C# internal name
        self.ProductTypeFilter = "@PwReportFilter.ProductType";
        self.VendorFilter = "@PwReportFilter.Vendor";
        self.ProductFilter = "@PwReportFilter.Product";
        self.SkuFilter = "@PwReportFilter.Sku";

        self.ReportId = ko.observable();

        self.SelectedFilterModel = ko.observable();

        self.FilterByType = function (filterType) {
            return AQ(self.FiltersGrid())
                .where(function (item) { return item.FilterType == filterType; })
                .toArray();
        }

        self.FiltersGrid = ko.observableArray([]);
        self.ProductTypesGrid = ko.computed(function () { return self.FilterByType(self.ProductTypeFilter); });
        self.VendorsGrid = ko.computed(function () { return self.FilterByType(self.VendorFilter); });
        self.ProductsGrid = ko.computed(function () { return self.FilterByType(self.ProductFilter); });
        self.SkuGrid = ko.computed(function () { return self.FilterByType(self.SkuFilter); });

        self.CancelCallback = function () { };

        self.OkCallback = function () { };

        self.OkButtonClick = function () {
            self.ClickOnNewFilterTab();
            self.OkCallback();
        };

        self.CancelButtonClick = function () {
            self.CancelCallback();
        };


        // When these methods are invoked, the underlying data has changed...
        self.UpdateFilter = function (key, selected, filterType, title) {
            flow.exec(
                function () {
                    var ajax = new ProfitWiseFunctions.Ajax();
                    var data = {
                        reportId: self.ReportId(),
                        filterType: filterType,
                        key: key,
                        title: title,
                    };

                    if (selected) {
                        ajax.HttpPost("/ReportService/AddFilter", data, this);
                    } else {
                        ajax.HttpPost("/ReportService/RemoveFilter", data, this);
                    }
                },
                function () {
                    self.RefreshFilterSummary();
                });
        };

        self.RemoveFilter = function (item) {
            flow.exec(
                function () {
                    var ajax = new ProfitWiseFunctions.Ajax();
                    var data = {
                        reportId: self.ReportId(),
                        filterId: item.PwFilterId,
                    };
                    ajax.HttpPost(
                        "/ReportService/RemoveFilterById",
                        data, this);
                },
                function () {
                    var selectionModel = self.SelectionModelByFilterType(item.FilterType);
                    if (selectionModel) {
                        selectionModel.SetCheckedItemByKey(item.Key, false);
                    }
                    self.FiltersGrid.remove(item);
                    self.ReportSelectionPreviewModel.RefreshProductAndVariantCounts();
                }
            );
        };

        self.RemoveFilterType = function (filterType) {
            flow.exec(
                function () {
                    var ajax = new ProfitWiseFunctions.Ajax();
                    var data = {
                        reportId: self.ReportId(),
                        filterType: filterType,
                    };
                    ajax.HttpPost(
                        "/ReportService/RemoveFilterByType",
                        data, this);
                },
                function () {
                    var selectionModel = self.SelectionModelByFilterType(filterType);
                    if (selectionModel) {
                        selectionModel.UncheckAllItems();
                    }
                    self.RefreshFilterSummary();
                }
            );
        }

        // Product and Variant selections
        self.ProductSelections = ko.observableArray([]);
        
        self.RefreshFilterSummary = function (callback) {
            flow.exec(
                function () {
                    var ajax = new ProfitWiseFunctions.Ajax();
                    ajax.HttpGet("/ReportService/Filters?reportId=" + self.ReportId(), this);
                },
                function (filters) {
                    AQ(filters)
                        .each(function (item) {
                            item.RemoveClick = function () {
                                self.RemoveFilter(item);
                            }
                        });

                    self.FiltersGrid(filters);
                    self.ReportSelectionPreviewModel.RefreshProductAndVariantCounts(callback);
                }
            );
        };


        // Selection Preview model
        self.ReportSelectionPreviewModel = new ProfitWiseWidgets.ReportSelectionPreviewModel();
        

        // Filter Tab mechanics
        self.ClickOnNewFilterTab =
            function (newFilterModel, newTabRefreshFunction, bootstrapTabHref) {
                flow.exec(
                    function () {
                        if (self.SelectedFilterModel() == newFilterModel) {
                            return;
                        }
                        newTabRefreshFunction(this);
                    },
                    function () {
                        var filterKeys =
                            AQ(self.FilterByType(newFilterModel.FilterType))
                                .select(function (item) { return item.Key })
                                .toArray();

                        newFilterModel.SelectionModel.SetCheckItemsByKeyArray(filterKeys, true);
                        self.SelectedFilterModel(newFilterModel);
                        ProfitWiseFunctions.BsActivateTab(bootstrapTabHref);
                        $('html,body').animate({ scrollTop: 0 });
                    }
                );
            };

        self.ProductTypeClick = function () {
            self.ClickOnNewFilterTab(
                self.ReportProductTypeModel,
                function (callback) { self.ReportProductTypeModel.Refresh(self.ReportId(), callback); },
                "report-filter-product-type");
        };

        self.VendorClick = function () {
            self.ClickOnNewFilterTab(
                self.ReportVendorModel,
                function (callback) { self.ReportVendorModel.Refresh(self.ReportId(), callback); },
                "report-filter-vendor");
        };

        self.MasterProductClick = function () {
            self.ClickOnNewFilterTab(
                self.ReportMasterProductModel,
                function (callback) { self.ReportMasterProductModel.Refresh(self.ReportId(), callback); },
                "report-filter-product");
        };

        self.SkuClick = function () {
            self.ClickOnNewFilterTab(
                self.ReportSkuModel,
                function (callback) { self.ReportSkuModel.Refresh(self.ReportId(), callback); },
                "report-filter-sku");
        };

        self.RegisterCancelCallback = function (callback) {
            self.CancelCallback = callback;
        };

        self.RegisterOkCallback = function (callback) {
            self.OkCallback = callback;
        };

        self.LoadReport = function (reportId) {
            self.ReportId(reportId);
            self.ReportSelectionPreviewModel.ReportId(reportId);
            self.RefreshFilterSummary(function () {
                self.ProductTypeClick();
            });
        };

        // Wire in the individual Report Editor modules
        self.ReportProductTypeModel = new ProfitWiseWidgets.ReportProductTypeModel(self);
        self.ReportVendorModel = new ProfitWiseWidgets.ReportVendorModel(self);
        self.ReportMasterProductModel = new ProfitWiseWidgets.ReportMasterProductModel(self);
        self.ReportSkuModel = new ProfitWiseWidgets.ReportSkuModel(self);

        self.SelectionModelByFilterType = function (filterType) {
            if (filterType == self.ProductTypeFilter) {
                return self.ReportProductTypeModel.SelectionModel;
            }
            if (filterType == self.VendorFilter) {
                return self.ReportVendorModel.SelectionModel;
            }
            if (filterType == self.ProductFilter) {
                return self.ReportMasterProductModel.SelectionModel;
            }
            if (filterType == self.SkuFilter) {
                return self.ReportSkuModel.SelectionModel;
            }
        };

        return self;
    };
</script>

