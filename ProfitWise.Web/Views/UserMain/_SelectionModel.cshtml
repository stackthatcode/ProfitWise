<script>
    ProfitWiseWidgets = ProfitWiseWidgets || {};

    ProfitWiseWidgets.SelectionModel = function () {
        var self = this;

        self.EmptyDescription = ko.observable();
        self.AllItems = ko.observableArray();
        self.ShowSplashPage = ko.observable(true);
        
        self.LoadItems = function(allItems) {
            self.AddObservables(allItems);
            self.AllItems(allItems);
        };

        // Stubbed out to demonstrate the method signature...
        self.UpdateCallback = function (item, selected) { };

        self.AddObservables = function (data) {
            AQ(data)
                .each(function (item) {
                    item.IsChecked = ko.observable(false);

                    item.SelectChange = function () {
                        var selected = !item.IsChecked();                        
                        item.IsChecked(selected);
                        self.UpdateCallback(item, selected);
                    };
                });
        };
        
        self.RegisterUpdateCallback = function(callback) {
            self.UpdateCallback = callback;
        };

        self.AllItemsAreSelected = function () {
            var selectedCount = AQ(self.AllItems()).count(function (item) { return item.IsChecked() });
            return selectedCount == self.AllItems().length;
        };

        self.DeselectAll = function () {
            AQ(self.AllItems()).each(function (item) { item.IsChecked(false); });
            self.ShowSplashPage(true);
        };

        self.FindItemByKey = function (key) {
            return AQ(self.AllItems())
                    .firstOrDefault(function (item) { return item.Key == key });
        };

        self.SetCheckedItemByKey = function (key, selected) {
            var item = self.FindItemByKey(key);
            console.log("SetCheckedItemByKey");
            console.log(item);
            if (item) {
                item.IsChecked(selected);
            };
        };

        self.CheckedItems = function () {
            return AQ(self.AllItems())
                .where(function (item) { return item.IsChecked(); })
                .select(function (item) { return item.Key; })
                .toArray();
        };

        self.UncheckAllItems = function() {
            AQ(self.AllItems()).each(function(item) { item.IsChecked(false); });
        };

        self.SetCheckedItems = function (checkedItems) {
            AQ(checkedItems)
                .each(function (key) {
                    self.SetCheckedItemsByKey(key, true);
                });
        };

        self.NumberOfCheckedItems = ko.computed(function() {
            return self.CheckedItems().length;
        });

        self.ApplyFiltersAndPaging = function (searchText, showAll, pageNumber, pageSize) { 
            var filteredItems = self.AllItems();
            if (searchText.trim() != "") {
                filteredItems =
                    AQ(filteredItems)
                        .where(function (item) {
                            return ProfitWiseFunctions.CaseInsensitiveContains(item.ProductType, searchText);
                        })
                        .toArray();
            }
            
            if (!showAll) {
                filteredItems =
                    AQ(filteredItems)
                    .where(function (item) { return item.IsChecked() })
                    .toArray();
            }

            var skip = (pageNumber - 1) * pageSize;
            var take = pageSize;

            var pagedResults = 
                AQ(filteredItems)
                .skip(skip)
                .take(take)
                .where(function (n) { return n != null })
                .toArray();

            return {
                NumberOfFilteredItems: filteredItems.length,
                PagedItems: pagedResults,
            };
        };

        return self;
    };
</script>
