@using Push.Foundation.Web.Json
@model ProfitWise.Web.Models.EditProductCogsModel

@{
    ViewBag.CommonContext.PageTitle = "Edit Product Cost of Goods";
}


<style>
    table.table td {
        height: 70px !important;
        font-size: 14px;
        vertical-align: middle !important;
    }

    table.table th {
        font-size: 14px !important;
        font-weight: 700;
        color: #777;
        height: 60px;
    }

    #product-cogs tr td:nth-child(1), #heading tr th:nth-child(1) {
        width: 15%;
    }

    #product-cogs tr td:nth-child(2), #heading tr th:nth-child(2) {
        width: 25%;
    }

    #product-cogs tr td:nth-child(3), #heading tr th:nth-child(3) {
        width: 14%;
    }

    #product-cogs tr td:nth-child(4), #heading tr th:nth-child(4) {
        width: 13%;
        text-align: center;
    }

    #product-cogs tr td:nth-child(5), #heading tr th:nth-child(5) {
        width: 13%;
        text-align: center;
    }

    #product-cogs tr td:nth-child(6), #heading tr th:nth-child(6) {
        width: 10%;
        text-align: center;
    }

    #product-cogs tr td:nth-child(7), #heading tr th:nth-child(7) {
        width: 10%;
        text-align: center;
    }

    input[type='text'] {
        width: 100px;
    }

</style>

<!-- KnockoutJS Templates -->
@Html.Partial("_PagingWidget")
@Html.Partial("_ProductFilterWidget")
@Html.Partial("_MoneyRangeWidget")
@Html.Partial("_PageFooter")

<script type="text/html" id="Page-Header">
    <div id="fixed-positioning-container">
        <div id="top-header-sleeve" style="height: 210px;">

            <!-- This element will track with the scrollbar via JavaScript wiring to onscroll-->
            <div id="top-header">

                <div class="row" style="padding-left: 25px; padding-right: 25px;">
                    <!-- Filtering Widget -->
                    <div class="col-lg-6" style="padding-top: 20px;">
                        <div class="pull-left;"
                             data-bind="template: { name: 'Product-Filter-Widget', data: $root.FilterModel }">
                        </div>
                    </div>

                    <!-- Paging Widget -->
                    <div class="col-lg-6">
                        <div style="height: 20px;" class="visible-lg"></div>
                        <div data-bind="visible: $root.CurrentGrid().length > 0">
                            <div style="min-width: 500px;" data-bind="template: { name: 'Paging-Widget', data: $root.PagingModel }">
                            </div>
                        </div>
                    </div>
                </div>


                <!-- Table Headings - note: measured table rendering height is 61px, top border offset is 20px; -->
                <div class="header-horz-padding" style="position: absolute; top: 129px;"
                     data-bind="visible: $root.CurrentGrid().length > 0">
                    <table class="table" id="heading" style="margin-bottom: 0px;">
                        <thead>
                        <tr>
                            <th class="order-by-column"
                                data-bind="click: function() { SortByClick(0) }">
                                Vendor

                                <span data-bind="visible: SortByColumnIndex() == 0">
                                    <span data-bind="template: 'Sorting-Arrows-Active'"></span>
                                </span>
                                <span data-bind="visible: SortByColumnIndex() != 0">                                    
                                </span>
                            </th>

                            <th class="order-by-column" data-bind="click: function() { SortByClick(1); }">
                                Product

                                <span data-bind="visible: SortByColumnIndex() == 1">
                                    <span data-bind="template: 'Sorting-Arrows-Active'"></span>
                                </span>
                                <span data-bind="visible: SortByColumnIndex() != 1">
                                </span>
                            </th>

                            <th>Inventory</th>
                            <th>Price</th>
                            <th>CoGS</th>

                            <th style="text-align: center;"><a href="#" data-bind="click: $root.StockedDirectlyHeaderClick">Stocked Directly</a></th>
                            <th style="text-align: center;"><a href="#" data-bind="click: $root.ExcludeHeaderLinkClick">Exclude</a></th>
                        </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>
    </div>
</script>

<script type="text/html" id="Sorting-Arrows-Active">
    <span data-bind="if: $root.SortByDirectionDown">
        <i class="glyphicon glyphicon-triangle-bottom"></i>
    </span>
    <span data-bind="ifnot: $root.SortByDirectionDown">
        <i class="glyphicon glyphicon-triangle-top"></i>
    </span>
</script>

<script type="text/html" id="Main-Template">
    <div data-bind="template: { name: 'Page-Header', data: $data }"></div>

    <div class="container" style="margin: 0; width: 100%; padding-left: 20px; padding-right: 20px;">
        <div style="position: relative; min-width: 900px; margin-top: 209px; background-color: #FFF; padding-left: 25px; padding-right: 25px;">

            <!-- No Products Found matching XYZ -->
            <div id="no-products-found" style="width: 100%;"
                 data-bind="visible: $root.NoProductsFound() && $root.CurrentGrid().length == 0">
                <div style="text-align: center; padding-top: 20px; padding-bottom: 100px;">
                    <i style="font-size: 6.0em; color: #CCC;" class="glyphicon glyphicon-tag"></i>
                    <h3 style="color: #555; font-weight: 300;">Could not find any products</h3>
                    <span style="color: #AAA;">Try changing the filters or search term</span>
                </div>
            </div>

            <!-- Actual Product Cogs -->
            <table id="product-cogs" class="table" style="width: 100%; height: 100%; margin: 0;">
                <tbody data-bind="foreach: $root.CurrentGrid">
                <tr>
                    <td class="overflow-gracefully" data-bind="text: Vendor"></td>
                    <td class="overflow-gracefully"><a href="CoGSProduct.html" data-bind="text: ProductTitle"></a></td>
                    <td><span data-bind="text: InventoryCount"></span> in stock<br/>
                        (<span data-bind="text: VariantCount"></span> variants)</td>

                    <td data-bind="template: { name: 'Money-Range-Widget-Vertical', data: Price }">
                    </td>

                    <td>
                        <a href="#" data-bind="click: $root.LaunchBulkEditPopup">
                            <span data-bind="template: { name: 'Money-Range-Widget-Vertical', data: Cogs }">
                            </span>
                        </a>
                    </td>
                    <td>
                        <div data-bind="if: StockedDirectlyCount == VariantCount || StockedDirectlyCount == 0">
                            <input type="checkbox" data-bind="click: $root.StockedDirectlyCheckboxClick, checked: $root.StockedDirectlyChecked($data)"/>
                        </div>

                        <div data-bind="if: StockedDirectlyCount > 0 && StockedDirectlyCount < VariantCount">
                            <a href="#"
                               data-bind="click: $root.StockedDirectlyGridLinkClick">
                                <span data-bind="text: StockedDirectlyCount"></span> of
                                <span data-bind="text: VariantCount"></span>
                            </a>
                        </div>
                    </td>

                    <td>
                        <div data-bind="if: ExcludedCount == VariantCount || ExcludedCount == 0">
                            <input type="checkbox" data-bind="click: $root.ExcludedCheckboxClick, checked: $root.ExcludedChecked($data)"/>
                        </div>

                        <div data-bind="if: ExcludedCount > 0 && ExcludedCount < VariantCount">
                            <a href="#"
                               data-bind="click: $root.ExcludedGridLinkClick">
                                <span data-bind="text: ExcludedCount"></span> of
                                <span data-bind="text: VariantCount"></span>
                            </a>
                        </div>
                    </td>
                </tr>
                </tbody>
            </table>
        </div>
    </div>

    <div data-bind="template: { name: 'Page-Footer'}"></div>
</script>

<!-- KnockoutJS Root View --><!-- data: $root.EndlessGlider, -->
<div data-bind="template: { name: 'Main-Template' }">
</div>


<!-- KnockoutJS Model -->
<script>
    var productTypes = @Html.Raw(Model.ProductTypes.SerializeToJson());
    var productVendors = @Html.Raw(Model.Vendors.SerializeToJson());

    var ProfitWise = ProfitWise || {};

    ProfitWise.EditCogsModel = function () {
        var self = this;

        self.CurrentGrid = ko.observableArray();
        self.NoProductsFound = ko.observable(false);

        self.PagingModel = new ProfitWiseWidgets.PagingModel();

        self.FilterModel = new ProfitWiseWidgets.ProductFilterModel(productTypes, productVendors);

        self.FilterModel.RegisterCallbackFunction(function() { self.SearchForProducts(); });


        // *** Sorting functionality *** //
        self.SortByColumnIndex = ko.observable(0);
        self.SortByDirectionDown = ko.observable(true);

        self.SortByClick = function(index) {
            if (index == self.SortByColumnIndex()) {
                self.SortByDirectionDown(!self.SortByDirectionDown());
            } else {
                self.SortByDirectionDown(true);
            }
            self.SortByColumnIndex(index);
            self.LoadDataForCurrentPage();
        }


        // ** Excluded interactivity *** //
        self.ExcludedChecked = function(data) {
            return data.ExcludedCount == data.VariantCount;
        };

        self.ExcludedCheckboxClick = function (model) {
            // TODO => update server
            self.LoadSingleProductRecord(model.Id);
        };

        self.ExcludedGridLinkClick = function (model) {
            ProfitWiseShopify.LaunchExcludedProductVariantPopup(model.Id, function () {
                alert("ok, let's do something for excluded!!!");
            });
        };

        self.ExcludeHeaderLinkClick = function () {
            ProfitWiseShopify.LaunchExcludedProductsPopup(function () {
                alert("ok, I'm doing a lot of excluding!!!");
            });
        };

        self.ExcludedClick = function (model) {
            alert("Stocked Directly Click");
        };


        // *** Stocked Directly interactivity *** //
        self.StockedDirectlyChecked = function (data) {
            return data.StockedDirectlyCount == data.VariantCount;
        };

        self.StockedDirectlyCheckboxClick = function (model) {
            // TODO => update server
            self.LoadSingleProductRecord(model.Id);
        };

        self.StockedDirectlyGridLinkClick = function (model) {
            ProfitWiseShopify.LaunchStockedDirectlyVariantsPopup(model.Id, function () {
                alert("ok, let's do something!!!");
            });
        };

        self.StockedDirectlyHeaderClick = function () {
            ProfitWiseShopify.LaunchStockedDirectlyProductsPopup(function () {
                alert("ok, I'm changing a lot of Stocked Directly!!!");
            });
        };

        self.StockedDirectlyClick = function (model) {
            alert("Stocked Directly Click");
        };

        self.SetProductAllStockedDirectly = function (model) {
            alert("All " + model.Id);
        };

        self.SetProductNoneStockedDirectly = function (model) {
            alert("None " + model.Id);
        };


        // *** Launch Bulk Edit Popup *** //
        self.LaunchBulkEditPopup = function (model) {
            ProfitWiseShopify.LaunchBulkEditPopUp(model.Id,
                function (shopifyProductId) {
                    self.LoadSingleProductRecord(shopifyProductId);
                });
        }

        // *** Search for Products *** //
        self.SearchForProducts = function () {
            self.PagingModel.PageNumber(1);
            self.LoadDataForCurrentPage();
        };

        self.LoadDataForCurrentPage = function () {

            var filters = [];
            ko.utils.arrayForEach(
                self.FilterModel.SelectedFiltersForSearch(),
                function(item) {
                    filters.push({ 
                        Type: item.Type(),
                        Value: item.Value(),
                    });
                });

            var search = {
                Text: self.FilterModel.SearchText(),
                PageNumber: self.PagingModel.PageNumber(),
                PageSize: self.PagingModel.PageSize(),
                SortByColumn: self.SortByColumnIndex(),
                SortByDirectionDown: self.SortByDirectionDown(),
                Filters: filters,
            };

            var ajax = new ProfitWiseFunctions.Ajax();
            ajax.HttpPost(
                "/Cogs/Search", search,
                function (data) {
                    self.CurrentGrid.removeAll();

                    if (data.products.length == 0) {
                        self.NoProductsFound(true);
                    } else {
                        self.NoProductsFound(false);
                        self.CurrentGrid(data.products);
                        self.PagingModel.RecordCount(data.totalRecords);
                    }
                });
        };

        self.LoadSingleProductRecord = function (shopifyProductId) {
            ProfitWiseShopify.ErrorPopup();
        }

        self.PagingModel.SubscribeCallbackFunction(self.LoadDataForCurrentPage);

        return self;
    };


    $(document)
        .ready(function () {
            ProfitWiseFunctions.TableHeaderWidthInit("table#product-cogs tbody tr td", "table#heading thead tr th");
            ProfitWiseFunctions.FixedHeaderScrollingInit("#top-header");
            ProfitWiseFunctions.PopOverAutoCloseInit();

            var model = new ProfitWise.EditCogsModel();
            model.LoadDataForCurrentPage();
            ko.applyBindings(model);
        });
</script>


<script>
/*
flow.exec(
            function () {
                $("#spinner-layer").show();
                setTimeout(this, 1500);
            },
            function() {
                $("#spinner-layer").hide();
                callback(fakeDataFunction());
            });
            */

</script>



