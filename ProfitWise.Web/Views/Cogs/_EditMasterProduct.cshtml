
<style>
     #product-edit-grid td {
        height: 85px !important;
        font-size: 14px;
        vertical-align: middle !important;
    }

    #product-edit-grid th {
        font-size: 14px !important;
        font-weight: 700;
        color: #777;
        height: 60px;
    }

    #product-edit-grid tr td:nth-child(1), #product-edit-heading tr th:nth-child(1) {
        width: 35%;
    }

    #product-edit-grid tr td:nth-child(2), #product-edit-heading tr th:nth-child(2) {
        width: 20%;
        text-align: center;
    }

    #product-edit-grid tr td:nth-child(3), #product-edit-heading tr th:nth-child(3) {
        width: 20%;
        text-align: center;
    }

    #product-edit-grid tr td:nth-child(4), #product-edit-heading tr th:nth-child(4) {
        width: 10%;
        text-align: center;
    }

    #product-edit-grid tr td:nth-child(5), #product-edit-heading tr th:nth-child(5) {
        width: 7.5%;
        text-align: center;
    }

    #product-edit-grid tr td:nth-child(6), #product-edit-heading tr th:nth-child(6) {
        width: 7.5%;
        text-align: center;
    }

    input[type='text'] {
        width: 100px;
    }
</style>


<script type="text/html" id="Product-Edit-Header">
    <!-- Filtering and Paging -->
    <div class="row standard-padding">
        <div class="col-xs-12" style="padding-top: 20px;">
            <a style="width: 200px;" href="#" data-bind="click: ExitCallback">
                <i class="glyphicon glyphicon-arrow-left"></i> &nbsp;&nbsp;Go Back to Product Search
            </a>
            <h3 style="font-weight: 700; margin-bottom: 8px;" data-bind="text: MasterProductTitle"></h3>
            <div style="font-size: 1.0em; font-weight: 700;" data-bind="text: VariantTitle"></div>
            <div style="height: 20px;"></div>
        </div>
    </div>

    <div class="standard-padding" style="position: absolute; top: 129px;"
         data-bind="visible: $data.Grid().length > 0">

        <table class="table" id="product-edit-heading" style="margin-bottom: 0px;">
            <thead>
            <tr>
                <th>
                    <span data-bind="template: { name: 'Sortable-Column-Header',
                                data: { ColumnIndex: 0, ColumnName: 'Sku', Model: $data.SortingModel } }">
                    </span>
                    <span>&nbsp;/&nbsp;</span>
                    <span data-bind="template: { name: 'Sortable-Column-Header',
                                data: { ColumnIndex: 1, ColumnName: 'Title', Model: $data.SortingModel } }">
                    </span>
                </th>

                <th>Price</th>
                <th>
                    <a href="#" data-bind="click: function() { $data.CogsDialogPopup(); }">CoGS</a>
                </th>
                <th>Detail</th>
                
                <th style="text-align: center;">
                    <a href="#" data-bind="click: function() { $data.StockedDirectlyDialogPopup(); }">Stocked Directly</a>
                </th>
                <th style="text-align: center;">
                    <a href="#" data-bind="click: function() { $data.ExcludedDialogPopup(); }">Exclude</a>
                </th>
            </tr>
            </thead>
        </table>
    </div>
</script>

<script type="text/html" id="Product-Edit-Body">
    <!-- Search Results -->
    <table id="product-edit-grid" class="table" style="width: 100%; height: 100%; margin: 0;">
        <tbody data-bind="foreach: $data.Grid">
        <tr>
            <td class="overflow-gracefully">
                <span style="font-weight: 700;" data-bind="text: Sku"></span><br/>
                <span data-bind="text: Title, tooltip: { title: Title }"></span><br/>
                <span style="font-size: 0.8em;" data-bind="text: Inventory"></span> 
                <span> in-stock</span>
            </td>

            <td data-bind="template: { name: 'Money-Range-Widget-Vertical', data: Price }"></td>

            <td>
                <div data-bind="ifnot: EditorVisible">
                    <a href="#" data-bind="click: ClickOnCogs">
                        <span data-bind="text: ProfitWiseFunctions.FormatCurrencyWithAbbr(CurrentCogsAmount(), CurrentCogsCurrencyId())">
                        </span>
                    </a>
                </div>

                <div data-bind="if: EditorVisible">
                    <span data-bind="template: { name: 'Money-Editor-Widget', data: EditorModel }">
                    </span>
                    <div style="height: 5px;"></div>
                    <a href="#" style="font-size: 0.8em; font-weight: 600;"
                       data-bind="click: CancelAndHide"><i class="glyphicon glyphicon-remove"></i> Cancel</a>
                    <span>|</span>
                    <a href="#" style="font-size: 0.8em; font-weight: 600;"
                       data-bind="click: UpdateAndHide"><i class="glyphicon glyphicon-ok"></i> Save</a>
                </div>
            </td>

            <td><a href="#">Edit</a>|<a href="#">Delete</a></td>


            <td>
                <input type="checkbox"
                       data-bind="click: $parent.StockedDirectlyCheckboxClick, checked: $data.CurrentStockedDirectly"/>
            </td>

            <td>
                <input type="checkbox"
                       data-bind="click: $parent.ExcludedCheckboxClick, checked: $data.CurrentExcluded"/>
            </td>
        </tr>
        </tbody>
    </table>
</script>

<script>
    var ProfitWise = ProfitWise || {};

    ProfitWise.ProductVariantCogsEditorModel = function () {
        self.MasterProductId = ko.observable(null);
        self.MasterProductTitle = ko.observable("");
        self.Grid = ko.observable([]);
        self.SortingModel = new ProfitWiseWidgets.SortingModel();

        self.RefreshSort = function() {
            var gridData = self.Grid();

            var columnLambda =
                (self.SortingModel.SelectedColumnIndex() == 0)
                    ? function(n) { return n.Sku; }
                    : function (n) { return n.Title; };

            if (self.SortingModel.SortByDirectionDown()) {
                self.Grid(AQ(gridData).orderBy(columnLambda).toArray());
            } else {
                self.Grid(AQ(gridData).orderByDescending(columnLambda).toArray());
            }
        }

        self.SortingModel.Callback = function () {
            self.RefreshSort();
        };

        // *** Sorting stuff...
        self.VariantTitle = ko.computed(function () {
            return self.Grid().length + " Variant(s)";
        });

        self.RetrieveMasterProduct = function (masterProductId, callback) {
            self.MasterProductId(masterProductId);
            var settings = new ProfitWiseFunctions.AjaxSettings();
            var ajax = new ProfitWiseFunctions.Ajax(settings);
            var url = "/CogsService/RetrieveMasterProduct?masterProductId=" + self.MasterProductId();

            ajax.HttpGet(url, function (data) {
                self.LoadMasterProduct(data);
                if (callback) {
                    callback();
                }
            });
        };

        self.ExitCallback = function() {
        };
        

        self.Refresh = function() {
            self.RetrieveMasterProduct(self.MasterProductId());
        };

        self.LoadMasterProduct = function (data) {
            self.MasterProductTitle(data.MasterProduct.Title);
            
            AQ(data.MasterProduct.MasterVariants)
                .each(function (item) {
                    item.CurrentCogsCurrencyId = ko.observable(item.CogsCurrencyId);
                    item.CurrentCogsAmount = ko.observable(item.CogsAmount);
                    item.EditorVisible = ko.observable(false);

                    item.CurrentExcluded = ko.observable(item.Excluded);
                    item.CurrentStockedDirectly = ko.observable(item.StockedDirectly);

                    item.ClickOnCogs = function () {
                        var id = item.MasterVariantId;
                        self.HideCurrentCogsEditor();
                        self.SelectCogsByMasterVariantId(id);
                    }

                    item.EditorModel =
                        new ProfitWiseWidgets.MoneyEditorWidgetModel(
                                item.CogsCurrencyId, item.CogsAmount);

                    item.UpdateAndHide = function () {
                        item.EditorVisible(false);
                        self.UpdateVariantCogs(item);
                    };

                    item.CancelAndHide = function () {
                        item.EditorModel.PushState(
                            item.CurrentCogsCurrencyId(), item.CurrentCogsAmount());
                        item.EditorVisible(false);
                    };

                    item.EditorModel.RegisterEscapeKeyCallback(function () {
                        item.CancelAndHide();
                    });

                    item.EditorModel.RegisterEnterKeyCallback(function () {
                        item.EditorVisible(false);
                        self.UpdateVariantCogs(item);
                    });

                    item.EditorModel.RegisterChangeCurrencyCallback(function() {
                        self.UpdateVariantCogs(item);
                    });
                });

            self.Grid(data.MasterProduct.MasterVariants);
            self.RefreshSort();
        };

        self.HideCurrentCogsEditor = function () {
            var current =
                AQ(self.Grid())
                    .firstOrDefault(function (item) { return item.EditorVisible(); });

            if (current) {
                current.EditorVisible(false);
            }
        };
        
        self.SelectCogsByMasterVariantId = function (id) {            
            var item =
                AQ(self.Grid())
                    .firstOrDefault(function (n) { return n.MasterVariantId == id; });

            if (item) {
                item.EditorVisible(true);
                $('input.money-editor-text').focus();
            }
        }

        self.UpdateVariantCogs = function (item, callback) {
            var settings = new ProfitWiseFunctions.AjaxSettings();
            var ajax = new ProfitWiseFunctions.Ajax(settings);
            
            // Update observables
            item.CurrentCogsAmount(
                ProfitWiseFunctions.UnformatCurrency(item.EditorModel.Amount()));
            item.CurrentCogsCurrencyId(item.EditorModel.CurrencyId());

            var data = {
                masterVariantId: item.MasterVariantId,
                currencyId: item.CurrentCogsCurrencyId(),
                amount: item.CurrentCogsAmount(),
            };

            ajax.HttpPost("/CogsService/UpdateCogs", data, callback);
        };


        // *** Checkbox interactivity *** //
        self.StockedDirectlyCheckboxClick = function (item) {
            item.CurrentStockedDirectly(!item.CurrentStockedDirectly());
            var settings = new ProfitWiseFunctions.AjaxSettings();
            var ajax = new ProfitWiseFunctions.Ajax(settings);
            var data = {
                masterVariantId: item.MasterVariantId,
                value: item.CurrentStockedDirectly(),
            };

            ajax.HttpPost("/CogsService/StockedDirectlyByMasterVariantId", data);
            return true;    // Critical - must do this!
        };

        self.ExcludedCheckboxClick = function (item) {
            item.CurrentExcluded(!item.CurrentExcluded());

            var settings = new ProfitWiseFunctions.AjaxSettings();
            var ajax = new ProfitWiseFunctions.Ajax(settings);
            var data = {
                masterVariantId: item.MasterVariantId,
                value: item.CurrentExcluded(),
            };

            ajax.HttpPost("/CogsService/ExcludeByMasterVariantId", data);
            return true;
        };

        // *** Bulk Edit interactivity *** //
        self.StockedDirectlyDialogPopup = function () {
            console.log("StockedDirectlyDialogPopup");

            var url =
                ProfitWiseConfig.BaseUrl +
                    '/Cogs/StockedProductPopup?masterProductId=' + self.MasterProductId();

            ProfitWiseShopify.LaunchModal({
                src: url,
                title: 'Set Stocked Directly for all Variants for this Product',
                width: 'small',
                height: 250,
            }, self.Refresh);
        }
        
        self.ExcludedDialogPopup = function () {
            console.log("ExcludedDialogPopup");
            
            var url =
                ProfitWiseConfig.BaseUrl +
                    '/Cogs/ExcludedProductPopup?masterProductId=' + self.MasterProductId();

            ProfitWiseShopify.LaunchModal({
                src: url,
                title: 'Set Exclude/Include for all Product Variants',
                width: 'small',
                height: 200,
            }, self.Refresh);
        };

        self.CogsDialogPopup = function() {
            var url =
                ProfitWiseConfig.BaseUrl +
                    '/Cogs/BulkEditCogs?masterProductId=' + self.MasterProductId();

            ProfitWiseShopify.LaunchModal({
                src: url,
                title: 'Bulk Edit all Variant CoGS',
                width: 'small',
                height: 380,
            }, self.Refresh);
        };

        // Some JQuery initialization
        self.JQueryInit = function() {
            ProfitWiseFunctions.SynchronizeWidth(
                "table#product-edit-grid tbody tr td",
                "table#product-edit-heading thead tr th");
        };

        return self;
    };
</script>