@using ProfitWise.Data.Model.Cogs
<!-- Requires KnockoutJS Bootstrap integration plugin Knockstrap -->
<!-- Requires MoneyEditorWidget, NumberEditorWidget, & SelectorPopoverWidget -->

<style>
    .horizontal-cogs-editor .type-dropdown {
        float: left;
        width: 180px; 
    }

    .horizontal-cogs-editor .money-editor,
    .horizontal-cogs-editor .number-editor {
        float: left;
        width: 210px; 
    }

    .vertical-cogs-editor .type-dropdown,
    .vertical-cogs-editor .money-editor,
    .vertical-cogs-editor .number-editor {
        width: 100%;
        clear: both;
    }
</style>

<script type="text/html" id="Cogs-Editor-Widget">
    <div data-bind="attr: { class: $data.CssClass }" style="width:100%;">
        <select class="form-control type-dropdown"
                style="font-size: 0.9em; margin-bottom: 5px; margin-right: 10px;"
                data-bind="options: CogsTypes,
                        optionsText: 'Text',
                        optionsValue: 'Value',
                        value: SelectedCogsType,
                        event: { change: $data.SetFocus }">
        </select>

        <div class="money-editor"  data-bind="visible: !NumberEditorVisible()">
            <div data-bind="template: { name: 'Money-Editor-Widget', data: MoneyEditor }">
            </div>
        </div>

        <div class="number-editor" data-bind="visible: NumberEditorVisible()">
            <div data-bind="template: { name: 'Number-Editor-Widget', data: NumberEditor }">
            </div>
        </div>
    </div>
</script>

<script type="text/javascript">
    var ProfitWiseWidgets = ProfitWiseWidgets || {};

    // Parameters = { CogsTypeId, CogsCurrencyId, CogsAmount, CogsMarginPercent }
    ProfitWiseWidgets.CogsEditorWidgetModel = function(parameters) {
        var self = this;

        self.DefaultCurrencyId = ko.observable(parameters.DefaultCurrencyId);
        self.HorizontalEditor = ko.observable(false);
        self.CssClass = ko.computed(
            function() {
                return self.HorizontalEditor() ? "horizontal-cogs-editor" : "";
            }
        );

        // Parameters = { identifier, placeholder, lowconstraint, highconstraint, defaultamount, CogsCurrencyId }
        self.MoneyEditor = new ProfitWiseWidgets.MoneyEditorWidgetModel({
            identifier: "money-" + parameters.identifier,
            lowconstraint: 0,
            highconstraint: 999999999.99,
            defaultcurrencyid: parameters.CogsCurrencyId,
            defaultamount: parameters.CogsAmount,
        });

        // Parameters = { identifier, placeholder, lowconstraint, highconstraint, defaultamount }
        self.NumberEditor = new ProfitWiseWidgets.NumberEditorWidgetModel({
            identifier: "number-" + parameters.identifier,
            lowconstraint: 0,
            highconstraint: 100,
            defaultamount: parameters.CogsMarginPercent,
        });

        self.CogsTypes = [
            { Value: "@CogsType.FixedAmount", Text: "Fixed Amount" },
            { Value: "@CogsType.MarginPercentage", Text: "Compute by margin %" },
        ];

        self.SelectedCogsType = ko.observable(parameters.CogsTypeId);

        self.NumberEditorVisible = ko.computed(function() {
            return self.SelectedCogsType() == '@CogsType.MarginPercentage';
        });

        self.SetFocus = function() {
            if (self.NumberEditorVisible()) {
                self.NumberEditor.SetFocus();
            } else {
                self.MoneyEditor.SetFocus();
            }
        };

        self.PushState = function(state) {
            self.SelectedCogsType(state.CogsTypeId);
            self.MoneyEditor.CurrencyId(state.CogsCurrencyId || self.DefaultCurrencyId());
            self.MoneyEditor.Amount(state.CogsAmount);
            self.NumberEditor.Amount(state.CogsMarginPercent);
        };

        self.PullState = function() {
            return {
                CogsTypeId: self.SelectedCogsType(),
                CogsCurrencyId: self.MoneyEditor.CurrencyId(),
                CogsAmount: self.SelectedCogsType() == @CogsType.FixedAmount ? self.MoneyEditor.Amount() : null,
                CogsMarginPercent: self.SelectedCogsType() == @CogsType.MarginPercentage ? self.NumberEditor.Amount() : null,
            };
        };

        // Register to both child controls - this is just a pass-thru
        self.RegisterEnterKeyCallback = function (callback) {
            self.MoneyEditor.RegisterEnterKeyCallback(callback);
            self.NumberEditor.RegisterEnterKeyCallback(callback);
        };

        // Register to both child controls - this is just a pass-thru
        self.RegisterEscapeKeyCallback = function (callback) {
            self.MoneyEditor.RegisterEscapeKeyCallback(callback);
            self.NumberEditor.RegisterEscapeKeyCallback(callback);
        };

        return self;
    };
</script>
