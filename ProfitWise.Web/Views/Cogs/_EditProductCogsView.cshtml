@using ProfitWise.Web.Attributes

@{
    var commonContext = Context.AuthenticatedContext();
    var defaultCurrencyId = commonContext.IdentitySnapshot.PwShop.CurrencyId;
}

<style>
     #product-edit-grid td {
        height: 90px !important;
        font-size: 14px;
        vertical-align: middle !important;
    }

    #product-edit-grid th {
        font-size: 14px !important;
        font-weight: 700;
        color: #777;
        height: 50px;
    }

    #product-edit-heading tr th { border-bottom: none; }
    #product-edit-grid tr td:nth-child(1), #product-edit-heading tr th:nth-child(1) { width: 40%; }
    #product-edit-grid tr td:nth-child(2), #product-edit-heading tr th:nth-child(2) { width: 20%; text-align: center; }
    #product-edit-grid tr td:nth-child(3), #product-edit-heading tr th:nth-child(3) { width: 20%; text-align: center; }
    #product-edit-grid tr td:nth-child(4), #product-edit-heading tr th:nth-child(4) { width: 10%; text-align: center; }
    #product-edit-grid tr td:nth-child(5), #product-edit-heading tr th:nth-child(5) { width: 10%; text-align: center; }

    input[type='text'] { width: 100px; }
</style>

<script type="text/html" id="Product-Edit-Header">
    <!-- Filtering and Paging -->
    <div class="row">
        <div class="col-xs-6" style="padding-top: 20px;">
            
            <h3 class="edit-product-header overflow-gracefully" 
                data-bind="text: MasterProductTitle"></h3>
            <div class="edit-product-subtitle" data-bind="text: VariantTitle"></div>
            
            <div style="height:5px;"></div>

            <div class="return-link">
                <a href="#" class="btn btn-default" data-bind="click: ExitCallback">
                    <i class="glyphicon glyphicon-arrow-left"></i> &nbsp;Go Back
                </a>
            </div>
        </div>
        
        <div class="col-xs-6" style="text-align: right; padding-top: 40px;">
            <a href="#" class="btn btn-primary" style="width:250px;" data-bind="click: EditConsolidationCallback">
                <i class="glyphicon glyphicon-list"></i> &nbsp; Manage Consolidation
            </a>
        </div>
    </div>

    <div class="row" data-bind="visible: $data.Grid().length > 0">
        <div class="col-xs-12 edit-product-table-header">
            <table class="table" id="product-edit-heading" style="margin-bottom: 0px;">
                <thead>
                <tr>
                    <th>
                        <span data-bind="template: { name: 'Sortable-Column-Header',
                                data: { ColumnIndex: 0, ColumnName: 'Sku', Model: $data.SortingModel } }">
                        </span>
                        <span>&nbsp;/&nbsp;</span>
                        <span data-bind="template: { name: 'Sortable-Column-Header',
                                data: { ColumnIndex: 1, ColumnName: 'Title', Model: $data.SortingModel } }">
                        </span>
                    </th>

                    <th>Price</th>                    
                    <th>Cost of Goods Sold</th>                    
                    <th style="text-align: center;">
                        <a href="#" data-bind="click: function() { $data.StockedDirectlyDialogPopup(); }">Stocked<br />Directly</a>
                    </th>
                    <th style="text-align: center;">
                        <a href="#" data-bind="click: function() { $data.ExcludedDialogPopup(); }">Exclude</a>
                    </th>
                </tr>
                </thead>
            </table>
        </div>
    </div>
</script>

<script type="text/html" id="Product-Edit-Body">
    <!-- Search Results -->
    <table id="product-edit-grid" class="table" 
           style="width: 100%; height: 100%; margin: 0;">
        <tbody data-bind="foreach: $data.Grid">
        <tr>
            <td class="overflow-gracefully">
                <span style="font-weight: 700;" data-bind="text: SkuCorrected"></span><br/>
                <span data-bind="text: Title, tooltip: { title: CombinedTitle }"></span>
                
                <br/>
                <span style="font-size: 0.8em;" data-bind="text: InventoryText"></span> 
            </td>

            <td data-bind="template: { name: 'Money-Range-Widget-Vertical', data: Price }"></td>

            <td>
                <div data-bind="ifnot: EditorVisible">
                    <span data-bind="template: { name: 'Cogs-Summary-Widget', data: SummaryModel }">
                    </span>                    
                </div>

                <div data-bind="if: EditorVisible">
                    <div style="overflow:visible;" data-bind="template: { name: 'Cogs-Editor-Widget', data: EditorModel }">
                    </div>
                    
                    <div style="height: 7px;"></div>
                    
                    <a href="#" style="font-size: 0.8em; font-weight: 600;" data-bind="click: CancelAndHide">
                        <span><i class="glyphicon glyphicon-remove"></i> Cancel</span>
                    </a>
                    <span>|</span>
                    <a href="#" style="font-size: 0.8em; font-weight: 600;" data-bind="click: UpdateAndHide">
                        <span><i class="glyphicon glyphicon-ok"></i> Save</span>
                    </a>
                </div>
            </td>
            <td>
                <input type="checkbox"
                       data-bind="click: $parent.StockedDirectlyCheckboxClick, checked: $data.CurrentStockedDirectly"/>
            </td>
            <td>
                <input type="checkbox"
                       data-bind="click: $parent.ExcludedCheckboxClick, checked: $data.CurrentExcluded"/>
            </td>
        </tr>
        </tbody>
    </table>
</script>

<script>
    var ProfitWise = ProfitWise || {};

    // parameters = exitcallback, editconsolidationcallback
    ProfitWise.EditProductCogsModel = function (parameters) {
        var self = this;

        self.ExitCallback = parameters.exitcallback || function () { };
        self.EditConsolidationCallback = parameters.editconsolidationcallback || function () { };

        self.PwMasterProductId = ko.observable(null);
        self.MasterProductTitle = ko.observable("");

        self.Grid = ko.observable([]);
        self.SortingModel = new ProfitWiseWidgets.SortingModel();

        self.RefreshSort = function() {
            var gridData = self.Grid();

            var columnLambda =
                (self.SortingModel.SelectedColumnIndex() == 0)
                    ? function(n) { return n.Sku; }
                    : function (n) { return n.Title; };

            if (self.SortingModel.SortByDirectionDown()) {
                self.Grid(AQ(gridData).orderBy(columnLambda).toArray());
            } else {
                self.Grid(AQ(gridData).orderByDescending(columnLambda).toArray());
            }
        }

        self.SortingModel.Callback = function () {
            self.RefreshSort();
        };

        // Sorting stuff...
        self.VariantTitle = ko.computed(function () {
            return self.Grid().length + " Variant(s)";
        });

        self.RetrieveMasterProduct = function (pwMasterProductId, callback) {
            flow.exec(
                function () {
                    self.PwMasterProductId(pwMasterProductId);
                    var settings = new ProfitWiseFunctions.AjaxSettings();
                    var ajax = new ProfitWiseFunctions.Ajax(settings);
                    var url = "/CogsService/RetrieveMasterProduct?pwMasterProductId=" + self.PwMasterProductId();
                    ajax.HttpGet(url, this);
                },
                function (data) {
                    if (!data.MasterProduct) {
                        self.ExitCallback();
                        return;
                    }

                    self.LoadMasterProduct(data);
                    if (callback) {
                        callback();
                    }
                });
        };


        // Loading functions...
        self.Refresh = function() {
            self.RetrieveMasterProduct(self.PwMasterProductId());
        };
        
        self.LoadMasterProduct = function (data) {
            self.MasterProductTitle(data.MasterProduct.Title);
            
            AQ(data.MasterProduct.MasterVariants)
                .each(function (item) {                    
                    item.EditorVisible = ko.observable(false);
                    
                    item.CurrentExcluded = ko.observable(item.Excluded);
                    item.CurrentStockedDirectly = ko.observable(item.StockedDirectly);
                    
                    // Used for undo functions
                    item.OldState = ko.observable();

                    item.EditorModel
                        = new ProfitWiseWidgets.CogsEditorWidgetModel({
                            identifier: item.PwMasterVariantId,
                            CogsTypeId: item.CogsTypeId,
                            CogsCurrencyId: item.CogsCurrencyId,
                            CogsAmount: item.CogsAmount,
                            CogsMarginPercent: item.CogsMarginPercent,
                            DefaultCurrencyId: @defaultCurrencyId,
                        });

                    // We'll maintain state in the Summary Model
                    item.SummaryModel =
                        new ProfitWiseWidgets.CogsSummaryWidgetModel(item.ActiveCostOfGoods);

                    item.SummaryModel.CogsDetail(item.CogsDetail);

                    item.SummaryModel.EditCogsCallback = function() {
                        self.HideCurrentCogsEditor();
                        item.OldState(item.EditorModel.PullState());
                        item.EditorVisible(true);
                        item.EditorModel.SetFocus();
                    };
                    
                    item.SummaryModel.EditDetailCallback = function () {
                        var dialogTitle =
                                item.Sku ?
                                    item.Sku + " - " + item.Title :
                                    self.MasterProductTitle() + " - " + item.Title;

                        self.CogsDetailDialogPopup(item.PwMasterVariantId, dialogTitle);
                    };

                    item.CancelAndHide = function () {
                        item.EditorModel.PushState(item.OldState());
                        item.EditorVisible(false);
                    };

                    item.UpdateAndHide = function () {
                        item.EditorVisible(false);
                        var state = item.EditorModel.PullState();

                        // Save changes to the Summary model and trigger an AJAX update
                        item.SummaryModel.PushState(state);
                        self.UpdateVariantCogs(item.PwMasterVariantId, state);
                    };

                    item.EditorModel.RegisterEscapeKeyCallback(function () {
                        item.CancelAndHide();
                    });

                    item.EditorModel.RegisterEnterKeyCallback(function () {
                        item.UpdateAndHide();
                    });
                });

            self.Grid(data.MasterProduct.MasterVariants);
            self.RefreshSort();
        };

        self.HideCurrentCogsEditor = function () {
            var current =
                AQ(self.Grid())
                    .firstOrDefault(function (item) { return item.EditorVisible(); });

            if (current) {
                current.EditorVisible(false);
            }
        };
        
        self.SelectCogsByMasterVariantId = function (id) {            
            var item =
                AQ(self.Grid())
                    .firstOrDefault(function (n) { return n.PwMasterVariantId == id; });

            if (item) {
                item.EditorVisible(true);
                $('input.money-editor-text').focus();
            }
        }

        self.UpdateVariantCogs = function (pwMasterVariantId, cogs, callback) {
            var settings = new ProfitWiseFunctions.AjaxSettings();
            var ajax = new ProfitWiseFunctions.Ajax(settings);
            var data = {
                simpleCogs: cogs,
                pwMasterVariantId: pwMasterVariantId,
            };

            // Update observables 
            ajax.HttpPost("/CogsService/UpdateSimpleCogs", data, callback);
        };


        // Checkbox interactivity
        self.StockedDirectlyCheckboxClick = function (item) {
            item.CurrentStockedDirectly(!item.CurrentStockedDirectly());
            var settings = new ProfitWiseFunctions.AjaxSettings();
            var ajax = new ProfitWiseFunctions.Ajax(settings);
            var data = {
                pwMasterVariantId: item.PwMasterVariantId,
                value: item.CurrentStockedDirectly(),
            };

            ajax.HttpPost("/CogsService/StockedDirectlyByMasterVariantId", data);
            return true;    // Critical - must do this!
        };

        self.ExcludedCheckboxClick = function (item) {
            item.CurrentExcluded(!item.CurrentExcluded());

            var settings = new ProfitWiseFunctions.AjaxSettings();
            var ajax = new ProfitWiseFunctions.Ajax(settings);
            var data = {
                pwMasterVariantId: item.PwMasterVariantId,
                value: item.CurrentExcluded(),
            };

            ajax.HttpPost("/CogsService/ExcludeByMasterVariantId", data);
            return true;
        };

        // Bulk Edit interactivity
        self.StockedDirectlyDialogPopup = function () {            
            var url =
                ProfitWiseConfig.BaseUrl +
                    '/Cogs/StockedProductPopup?pwMasterProductId=' + self.PwMasterProductId();

            ProfitWiseShopify.LaunchModal({
                src: url,
                title: 'Set Stocked Directly for all Variants for this Product',
                width: 'small',
                height: 250,
            }, function(data) {
                self.Refresh();
            });
        }
        
        self.ExcludedDialogPopup = function () {            
            var url =
                ProfitWiseConfig.BaseUrl +
                    '/Cogs/ExcludedProductPopup?pwMasterProductId=' + self.PwMasterProductId();

            ProfitWiseShopify.LaunchModal({
                src: url,
                title: 'Set Exclude/Include for all Product Variants',
                width: 'small',
                height: 200,
            }, function(data) {
                self.Refresh();
            });
        };
        
        self.CogsDetailDialogPopup = function (pwMasterVariantId, dialogTitle) {
            var url = ProfitWiseConfig.BaseUrl +
                        '/Cogs/CogsDetail?pwMasterVariantId=' + pwMasterVariantId;
            
            ProfitWiseShopify.LaunchModal({
                src: url,
                title: 'Edit CoGS Detail: ' + dialogTitle,
                width: 'large',
                height: 500,
            }, function(data) {
                self.Refresh();
            });
        }


        // Some JQuery initialization
        self.JQueryInit = function() {
            ProfitWiseFunctions.SynchronizeWidth(
                "table#product-edit-grid tbody tr td",
                "table#product-edit-heading thead tr th");
        };

        return self;
    };
</script>