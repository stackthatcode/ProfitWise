@using ProfitWise.Web.Attributes
@using Push.Foundation.Utilities.Json

@model ProfitWise.Web.Models.EditProductCogsModel
@{
    Context.AuthenticatedContext().PageTitle = "Manage Products and CoGS";
}

@Html.Partial("~/Views/SharedTemplates/_PagingWidget.cshtml")
@Html.Partial("~/Views/SharedTemplates/_ProductFilterWidget.cshtml")
@Html.Partial("~/Views/SharedTemplates/_MoneyRangeWidget.cshtml")
@Html.Partial("~/Views/SharedTemplates/_MoneyEditorWidget.cshtml")
@Html.Partial("~/Views/SharedTemplates/_NumberEditorWidget.cshtml")
@Html.Partial("~/Views/SharedTemplates/_SortingColumnWidget.cshtml")

@Html.Partial("~/Views/Cogs/_CogsEditorWidget.cshtml")
@Html.Partial("~/Views/Cogs/_CogsProductSummaryWidget.cshtml") 
@Html.Partial("~/Views/Cogs/_CogsSummaryWidget.cshtml")
@Html.Partial("~/Views/Cogs/_EditProductCogsView.cshtml")
@Html.Partial("~/Views/Cogs/_EditProductConsolidationView.cshtml")

<style>
    table#product-search-grid tr td { height: 80px !important; vertical-align: middle !important; }
    table#product-search-grid th { font-weight: 700; color: #777; }

    #product-search-grid tr td:nth-child(1), #product-search-grid tr th:nth-child(1) { width: 15%; }
    #product-search-grid tr td:nth-child(2), #product-search-grid tr th:nth-child(2) { width: 25%; }
    #product-search-grid tr td:nth-child(3), #product-search-grid tr th:nth-child(3) { width: 14%; }
    #product-search-grid tr td:nth-child(4), #product-search-grid tr th:nth-child(4) { text-align: center; width: 13%; }
    #product-search-grid tr td:nth-child(5), #product-search-grid tr th:nth-child(5) { text-align: center; width: 13%; }
    #product-search-grid tr td:nth-child(6), #product-search-grid tr th:nth-child(6) { text-align: center; width: 10%; }
    #product-search-grid tr td:nth-child(7), #product-search-grid tr th:nth-child(7) { text-align: center; width: 10%; }

    input[type='text'] { width: 100px; }
    
    h3.drilldown-header { font-weight: 700; margin-bottom: 8px; font-size: 1.6em; height: 1.2em; }
    .drilldown-subtitle { font-size: 1.0em; font-weight: 700; color: #888; }
    .drilldown-spacer { height: 20px; }
</style>

<script type="text/html" id="Product-Bulk-Edit-Cogs-Confirm">
    <div style="text-align: center;">
        <div style="color:red;text-align: justify; padding:7px;">
            WARNING! This function will overwrite all CoGS data for all Products and Variants
            in the current search results. Once you Save, the operation cannot be undone!
        </div>

        <div style="height: 7px;"></div>
        <a href="#" style="font-size: 0.9em; font-weight: 600;"
           data-bind="click: function() { ProfitWiseFunctions.PopOverCloseAll(); }">
            <span><i class="glyphicon glyphicon-remove"></i> Cancel</span>
        </a>
        &nbsp;
        <span>|</span>
        &nbsp;
        <a href="#" style="font-size: 0.9em; font-weight: 600;" data-bind="click: BulkEditPopUp">
            <span><i class="glyphicon glyphicon-ok"></i> Ok, Proceed</span>
        </a>
    </div>    
</script>

<script type="text/html" id="Product-Search-Template">
    <!-- Filtering and Paging -->
    <div class="row">
        <!-- Filtering Widget -->
        <div class="col-lg-6" id="product-search">
            <div style="height: 20px;"></div>
            <div class="pull-left;"
                 data-bind="template: { name: 'Product-Filter-Widget', data: $root.FilterModel }">
            </div>
        </div>

        <!-- Paging Widget -->
        <div class="col-lg-6">
            <div style="height: 20px;" class="visible-lg"></div>
            <div data-bind="visible: $root.CurrentGrid().length > 0">
                <div style="text-align: right;" data-bind="template: { name: 'Paging-Widget', data: $root.PagingModel }">
                </div>
            </div>
        </div>
    </div>

    <!-- No Products Found matching XYZ -->
    <div id="no-products-found" style="width: 100%;"
         data-bind="visible: $root.ShowNoProductsFound() && $root.CurrentGrid().length == 0">
        <div style="text-align: center; padding-top: 100px; padding-bottom: 100px;">
            <i style="font-size: 6.0em; color: #CCC;" class="glyphicon glyphicon-tag"></i>
            <h3 style="color: #555; font-weight: 300;">Could not find any products</h3>
            <span style="color: #AAA;">Try changing the filters or search terms.</span>
        </div>
    </div>
    
    <!-- The margin bumps this downward so it hugs the bottom of the header -->
    <div class="row" data-bind="visible: $root.CurrentGrid().length > 0">
        <div class="col-xs-12">
            <table class="table" id="product-search-grid" data-bind="afterRender: ResetToLastScrollTop"
                   style="margin-top: 20px; margin-bottom: 0px;">
                <thead>
                <tr>
                    <th data-bind="template: { name: 'Sortable-Column-Header',
                                data: { ColumnIndex: 0, ColumnName: 'Vendor', Model: $root.SortingModel } }"></th>
                    <th data-bind="template: { name: 'Sortable-Column-Header',
                                data: { ColumnIndex: 1, ColumnName: 'Product', Model: $root.SortingModel } }"></th>
                    <th>Inventory</th>
                    <th>Price</th>
                    <th id="bulk-cogs-update-link" class="popover-container">
                        <a href="#" class="popover-launcher"
                           data-bind="popover: { options: { placement: 'bottom' , trigger: 'click' , },
                                            template: 'Product-Bulk-Edit-Cogs-Confirm', data: $data }">CoGS</a></th>
                    <th><a href="#" id="bulk-stocked-update-link"
                           data-bind="click: $root.StockedDirectlyPickListPopup">Stocked<br />Directly</a></th>
                    <th><a href="#" id="bulk-exclude-update-link"
                           data-bind="click: $root.ExcludePickListPopup">Exclude</a></th>
                </tr>
                </thead>

                <tbody data-bind="foreach: $root.CurrentGrid">
                <tr>
                    <td class="overflow-gracefully">
                        <span data-bind="if: Vendor">
                            <span data-bind="text: Vendor"></span>
                        </span>
                        <span data-bind="ifnot: Vendor">
                            (No Vendor)
                        </span>
                    </td>

                    <td class="overflow-gracefully">
                        <a href="#" class="link-to-cogs-detail"
                           data-bind="text: ProductTitle, click: $root.DrilldownToCogsEditor,
                                     tooltip: { title: ProductTitle, placement: 'bottom' }"></a>
                            @if (HttpContext.Current.AuthenticatedContext().IsImpersonated)
                            {
                                <span>MPID</span>
                                <span data-bind="text: PwMasterProductId"></span>
                            }
                    </td>

                    <td>
                        <span data-bind="text: TotalInventory"></span> in stock<br />
                        (<span data-bind="text: VariantCount"></span> variants)
                    </td>

                    <td data-bind="template: { name: 'Money-Range-Widget-Vertical', data: Price }"></td>

                    <td>
                        <a href="#" data-bind="click: $root.DrilldownToCogsEditor">
                            <span data-bind="template: { name: 'Cogs-Product-Summary-Widget', data: $data }"></span>
                        </a>
                    </td>

                    <td class="stocked-directly">
                        <div data-bind="if: StockedDirectlyCount == VariantCount || StockedDirectlyCount == 0">
                            <input type="checkbox" data-bind="click: $root.StockedDirectlyCheckboxClick, checked: $root.StockedDirectlyIsChecked($data)" />
                        </div>

                        <div data-bind="if: StockedDirectlyCount > 0 && StockedDirectlyCount < VariantCount">
                            <a href="#"
                               data-bind="click: $root.StockedDirectlyGridLinkClick">
                                <span data-bind="text: StockedDirectlyCount"></span> of
                                <span data-bind="text: VariantCount"></span>
                            </a>
                        </div>
                    </td>

                    <td class="excluded-product">
                        <div data-bind="if: ExcludedCount == VariantCount || ExcludedCount == 0">
                            <input type="checkbox" data-bind="click: $root.ExcludedCheckboxClick, checked: $root.ExcludedIsChecked($data)" />
                        </div>

                        <div data-bind="if: ExcludedCount > 0 && ExcludedCount < VariantCount">
                            <a href="#"
                               data-bind="click: $root.ExcludedGridLinkClick">
                                <span data-bind="text: ExcludedCount"></span> of
                                <span data-bind="text: VariantCount"></span>
                            </a>
                        </div>
                    </td>
                </tr>
                </tbody>
            </table>
        </div>
        
        <div class="col-xs-12">
            <div style="padding-top:20px; height:135px;">
                <div style="text-align: right;" data-bind="template: { name: 'Paging-Widget', data: $root.PagingModel }">
                </div>
            </div>
        </div>
    </div> 
</script>

<script type="text/html" id="Main-Template">
    <div class="std-outer-padding">
        <div class="std-inner-padding shadow" 
             style="margin-top:20px; min-width:640px; background-color:#FFF;">
            <div data-bind="if: SearchVisible">
                <div data-bind="template: { name: 'Product-Search-Template', data: $root }"></div>
            </div>
            <div data-bind="if: CogsEditorVisible">
                <div data-bind="template: { name: 'Product-Edit-Template', data: $root.EditProductCogsModel }"></div>
            </div>
            <div data-bind="if: ConsolidationEditorVisible">
                <div data-bind="template: { name: 'Product-Consolidation-Template', 
                                            data: $root.EditProductConsolidationModel }"></div>
            </div>
        </div>
    </div>

    <!--
    <div class="std-outer-padding">
        <div class="std-inner-padding" style="background-color:#FFF; min-height: 400px; min-width:640px;">
            <div data-bind="if: CogsEditorVisible">
                <div data-bind="template: { name: 'Product-Edit-Body', data: $root.EditProductCogsModel }"></div>
            </div>
            <div data-bind="if: ConsolidationEditorVisible">
                <div data-bind="template: { name: 'Product-Consolidation-Body', data: $root.EditProductConsolidationModel }"></div>
            </div>
            <div data-bind="if: SearchVisible">
                <div data-bind="template: { name: 'Product-Search-Body', data: $data }"></div>
            </div>
        </div>
    </div>-->    
</script>

<!-- KnockoutJS Root View -->
<div data-bind="template: { name: 'Main-Template' }">
</div>

<!-- KnockoutJS Model -->
<script>
    var productTypes = @Html.Raw(Model.ProductTypes.SerializeToJson());
    var productVendors = @Html.Raw(Model.Vendors.SerializeToJson());

    ProfitWise = ProfitWise || {};

    ProfitWise.ProductSearchModel = function () {
        var self = this;
        
        self.PickListId = ko.observable();
        self.CurrentGrid = ko.observableArray();
        self.ShowNoProductsFound = ko.observable(false);

        // *** Widget Model instantiation
        self.PagingModel = new ProfitWiseWidgets.PagingModel();
        self.PagingModel.Callback = function() { self.LoadDataForCurrentPage(); };
        self.PagingModel.ShowPageSizeSelector(true);
        
        self.FilterModel = new ProfitWiseWidgets.ProductFilterModel(productTypes, productVendors);
        self.FilterModel.Callback = function() { self.SearchForProducts(); };

        self.SortingModel = new ProfitWiseWidgets.SortingModel();
        self.SortingModel.Callback = function() { self.LoadDataForCurrentPage(); };
        
        // *** Launch Bulk Edit Popup *** //
        self.BulkEditPopUp = function() {            
            ProfitWiseFunctions.PopOverCloseAll();

            var url = ProfitWiseConfig.BaseUrl + '/Cogs/CogsDetail?pwPickListId=' + self.PickListId();            
            ProfitWiseShopify.LaunchModal({
                src: url,
                title: 'Add CoGS Detail to all Products in current Search',
                width: 'large',
                height: 500,
            },  function(data) {
                self.LoadDataForCurrentPage();
            });
        };
        
        // *** Stocked Directly interactivity *** //
        self.StockedDirectlyPickListPopup = function () {
            var url = 
                ProfitWiseConfig.BaseUrl +
                    '/Cogs/StockedPicklistPopup?pickListId=' + self.PickListId();

            ProfitWiseShopify.LaunchModal({
                src: url,
                title: 'Set Stocked Directly for all Products in Search',
                width: 'small',
                height: 300,
            },  function(data) {
                self.LoadDataForCurrentPage();
            });
        };

        self.StockedDirectlyIsChecked = function (data) {
            return data.StockedDirectlyCount == data.VariantCount;
        };

        self.StockedDirectlyCheckboxClick = function (model) {
            var settings = new ProfitWiseFunctions.AjaxSettings();
            var ajax = new ProfitWiseFunctions.Ajax(settings);
            var data = {
                pwMasterProductId: model.PwMasterProductId,
                value: !self.StockedDirectlyIsChecked(model),
            };

            ajax.HttpPost(
                "/CogsService/StockedDirectlyByMasterProductId", 
                data, self.LoadDataForCurrentPage);
        };

        self.StockedDirectlyGridLinkClick = function (model) {
            var url =
                ProfitWiseConfig.BaseUrl +
                    '/Cogs/StockedProductPopup?pwMasterProductId=' + model.PwMasterProductId;

            ProfitWiseShopify.LaunchModal({
                src: url,
                title: 'Set Stocked Directly for all Variants for this Product',
                width: 'small',
                height: 250,
            },  function(data) {
                self.LoadDataForCurrentPage();
            });
        };

        // ** Excluded interactivity *** //
        self.ExcludePickListPopup = function () {
            var url =
                ProfitWiseConfig.BaseUrl +
                    '/Cogs/ExcludedPickListPopup?pickListId=' + self.PickListId();

            ProfitWiseShopify.LaunchModal({
                src: url,
                title: 'Set Exclude/Include for all Products in Search',
                width: 'small',
                height: 350,
            }, function(data) {
                self.LoadDataForCurrentPage();
            });
        };

        self.ExcludedIsChecked = function(data) {
            return data.ExcludedCount == data.VariantCount;
        };

        self.ExcludedCheckboxClick = function (model) {
            var settings = new ProfitWiseFunctions.AjaxSettings();
            var ajax = new ProfitWiseFunctions.Ajax(settings);
            var data = {
                pwMasterProductId: model.PwMasterProductId,
                value: !self.ExcludedIsChecked(model),
            };

            ajax.HttpPost("/CogsService/ExcludeByMasterProductId", 
                        data, self.LoadDataForCurrentPage);
        };

        self.ExcludedGridLinkClick = function (model) {
            var url =
                ProfitWiseConfig.BaseUrl +
                    '/Cogs/ExcludedProductPopup?pwMasterProductId=' + model.PwMasterProductId;

            ProfitWiseShopify.LaunchModal({
                src: url,
                title: 'Set Exclude/Include for all Product Variants',
                width: 'small',
                height: 200,
            }, function(data) {
                self.LoadDataForCurrentPage();
            });
        };


        // *** Search for Products *** //
        self.SearchForProducts = function (callback, pageOverride) {
            flow.exec(                
                function() {
                    var filters = [];
                    ko.utils.arrayForEach(
                        self.FilterModel.SelectedFiltersForSearch(),
                        function(item) {
                            filters.push({
                                Type: item.Type(),
                                Value: item.Value(),
                            });
                        });

                    var search = {
                        Text: self.FilterModel.SearchText(),
                        Filters: filters,
                        CurrentPickListId: self.PickListId(),
                    };

                    var ajax = new ProfitWiseFunctions.Ajax();
                    ajax.HttpPost("/CogsService/Search", search, this);

                },
                function(data) {
                    self.PickListId(data.PickListId);
                    self.PagingModel.PageNumber(pageOverride || 1);
                    $('html,body').animate({ scrollTop: 0 });
                    self.LoadDataForCurrentPage(callback);
                });
        };

        self.ForceRequeryState = ko.observable(false);

        self.ForceRequery = function() {
            self.ForceRequeryState(true);
        }

        self.LoadDataForCurrentPage = function (callback) {            
            if (self.ForceRequeryState()) {
                self.ForceRequeryState(false);
                self.SearchForProducts(self.PagingModel.PageNumber());
                return;
            }
            flow.exec(
                function() {
                    var resultsPaging = {
                        PickListId: self.PickListId(),
                        PageNumber: self.PagingModel.PageNumber(),
                        PageSize: self.PagingModel.PageSize(),
                        SortByColumn: self.SortingModel.SelectedColumnIndex(),
                        SortByDirectionDown: self.SortingModel.SortByDirectionDown(),
                    };

                    var ajax = new ProfitWiseFunctions.Ajax();
                    ajax.HttpPost("/CogsService/RetrieveResults", resultsPaging, this);
                },
                function (data) {
                    self.CurrentGrid.removeAll();

                    if (data.totalRecords == 0) {
                        self.ShowNoProductsFound(true);
                        return;
                    }

                    if (data.products.length == 0) {
                        self.SearchForProducts(self.PagingModel.PageNumber());
                        return;
                    }

                    if (!data.pickListValid) {
                        ShopifyApp.Modal.alert(
                            "Your query appears to have expired. The page will refresh so you can re-enter parameters.",
                            function(result) { location.reload(); });
                        return;
                    };                      
                    
                    self.ShowNoProductsFound(false);
                    self.CurrentGrid(data.products);
                    self.PagingModel.RecordCount(data.totalRecords);

                    self.ResetToLastScrollTop();
                    if (callback) {
                        callback();
                    }
                });
        };


        //** Larger interface state management for visibility  **//
        self.EditProductId = ko.observable(null);

        self.CogsEditorVisible = ko.observable(false);
        self.ConsolidationEditorVisible = ko.observable(false);
        self.SearchVisible = ko.computed(function() {
            return !self.CogsEditorVisible() && !self.ConsolidationEditorVisible();
        });

        self.ReturnToProductSearch = function() {
            self.ConsolidationEditorVisible(false);
            self.CogsEditorVisible(false);
            self.EditProductId(null);
            self.LoadDataForCurrentPage();
        };

        self.DrilldownToCogsEditor = function(model) {
            self.EditProductId(model.PwMasterProductId);
            self.LastScrollTop = $(document).scrollTop();
            self.ShowCogsEditor();
        };

        self.ShowCogsEditor = function() {
            self.CogsEditorVisible(true);
            self.ConsolidationEditorVisible(false);
            
            self.EditProductCogsModel.RetrieveMasterProduct(self.EditProductId());
            $('html,body').animate({ scrollTop: 0 });
        };

        self.ShowConsolidationEditor = function() {
            self.CogsEditorVisible(false);
            self.ConsolidationEditorVisible(true);

            self.EditProductConsolidationModel.RetrieveMasterProduct(self.EditProductId());
            $('html,body').animate({ scrollTop: 0 });
        };

        // Wire state-management delegates into sub-models
        self.EditProductCogsModel = new ProfitWise.EditProductCogsModel({
                    exitcallback: self.ReturnToProductSearch,
                    editconsolidationcallback: self.ShowConsolidationEditor,
                });

        self.EditProductConsolidationModel = new ProfitWise.EditProductConsolidationModel({
                    exitcallback: self.ReturnToProductSearch,
                    editcogscallback: self.ShowCogsEditor,
                    forcerequerycallback: self.ForceRequery 
                });

        
        // JQuery and scrolling helper functions
        self.LastScrollTop = null;
        self.ResetToLastScrollTop = function() {
            if (self.LastScrollTop != null) {
                $(document).scrollTop(self.LastScrollTop);
                self.LastScrollTop = null;
            } 
        };
        
        self.JQueryInit = function() {
            ProfitWiseFunctions.PopOverAutoCloseInit();
        };

        return self;
    };
    
    ProfitWise.CogsGridTour = new Tour({
        storage: false,
        backdrop: true,
        backdropContainer: 'body',

        steps: [
        {
            orphan: true,
            title: "Manage Products and CoGS",
            content: "This is the Manage Products and CoGS page. From here, you can set the Cost of Goods for all of your products. This is a crucial step, as having accurate Cost of Goods data will enable ProfitWise to provide you with accurate information about your profitability.",
            placement: 'bottom',
        },
        {
            element: "#product-search .filter-textbox",
            title: "Search by text",
            content: "Enter text here to search for specific products. You can search by Vendor, Product Title, Variant Title or SKU. Click the Search button to execute your search query and the results below will be updated accordingly.",
            placement: 'bottom',
        },
        {
            element: "#product-search .filter-dropdown",
            title: "Filter dropdown",
            content: "Click here to filter the results by Product Type, Vendor, Tags, or Missing CoGS (to display any products without CoGS data entered).",
            placement: 'bottom',
        },
        {
            element: "#bulk-cogs-update-link",
            title: "Set CoGS for all results",
            content: "Click here to set a CoGS value for ALL products and variants at once. Use this carefully, as it will overwrite all of your existing CoGS data!",
            placement: 'bottom',
        },
        {
            element: "#product-search-grid tr:nth-of-type(1) .stocked-directly",
            title: "Stocked Directly",
            content: "Use these checkboxes to set which products are Stocked Directly. This indicates which products are in your warehouse (as opposed to other products that may be drop-shipped from a third party). This will be used to provide an accurate Inventory Valuation Report, which we'll show you later in the tour.",
            placement: 'bottom',
        },
        {
            element: "#bulk-stocked-update-link",
            title: "Set Stocked Directly for all results",
            content: "By clicking on the 'Stocked Directly' column header, you can turn this setting on or off for all of the products in your current results at once.",
            placement: 'bottom',
        },
        {
            element: "#product-search-grid tr:nth-of-type(1) .excluded-product",
            title: "Exclude Product",
            content: "Use these checkboxes to set which products should be excluded from ProfitWise reporting. This can be useful for test products or other products you don't want to appear in your reports. Any revenues, costs or profits associated with these excluded products will not be included in ProfitWise totals.",
            placement: 'bottom',
        },
        {
            element: "#bulk-exclude-update-link",
            title: "Exclude all results",
            content: "By clicking on the 'Exclude' column header, you can turn this setting on or off for all of the products in your current results at once.",
            placement: 'bottom',
        },
        {
            element: "#product-search-grid tr:nth-of-type(1) .link-to-cogs-detail",
            title: "Link to CoGS Detail",
            content: "Clicking on a Product Title or CoGS value will take you to the Product Detail screen. Go ahead and click here to go to that page now.",
            placement: 'bottom',
        },
        ]
    });

    $(document)
        .ready(function () {
            var model = new ProfitWise.ProductSearchModel();
            ko.applyBindings(model);
            model.JQueryInit();
            model.SearchForProducts();
            
            ProfitWise.CogsGridTour.init();
            ProfitWise.CogsGridTour.start();
        });
</script>
