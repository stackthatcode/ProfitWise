@using ProfitWise.Data.Model.System
<!-- Requires KnockoutJS Bootstrap integration plugin Knockstrap -->

<style>
    .currency-popover a {
        text-decoration: none;
        color: #666;
        font-size: 0.9em;
        font-weight: 600;
        height: 22px;
        display: block;
    }
    .currency-popover a:hover {
        color: #999;
        text-decoration: none;
    }
</style>

<script type="text/html" id="Money-Editor-Widget-Popover">
    <div class="currency-popover" data-bind="foreach: ProfitWiseFunctions.CurrencyCache">
        <a href="#" data-bind="click: $parent.ChangeCurrencySelection">
            <span data-bind="text: Abbr" style="display: inline-block; width: 32px;"></span> 
            (<span data-bind="text: Symbol"></span>) 
        </a>
    </div>
</script>

<script type="text/html" id="Money-Editor-Widget">
    <div class="input-group popover-container currency-widget">
        <div style="width: 70px;" class="input-group-addon popover-launcher"
             data-bind="text: SelectedCurrencyFriendly, 
                    popover: { options: { placement: 'bottom' , trigger: 'click' , }, 
                            template: 'Money-Editor-Widget-Popover', data: $data }">
        </div>

        <input type="text" class="form-control money-editor-text" style="width:100%;"
               data-bind="value: Amount,
                        attr: { id: $data.Identifier, placeholder: $data.PlaceHolder },
                        event: {
                            focus: function() { 
                                if (event) { 
                                    event.target.select();
                                }
                            }, 
                            keyup: InvokeKeyCallback,
                            blur: InvokeEditorLostFocusCallback }"               
               maxlength="12">
    </div>
</script>

<script type="text/javascript">
    var ProfitWiseWidgets = ProfitWiseWidgets || {};

    // Parameters = { identifier, placeholder, lowconstraint, highconstraint, defaultamount, defaultcurrencyid }
    ProfitWiseWidgets.MoneyEditorWidgetModel = function(parameters) {
        var self = this;
        self.CurrencyCache = ProfitWiseFunctions.CurrencyCache;

        var defaultCurrencyId = @Currency.DefaultCurrencyId; // USD
        
        // Populate the input amounts
        self.Identifier = ko.observable(parameters.identifier);
        self.CurrencyId = ko.observable(parameters.currencyid || defaultCurrencyId);   // Default to Currency Id = 1;
        self.Amount = ko.observable(numeral(parameters.defaultamount || 0).format('0.00'))
                .extend({ numeric: { LowConstraint: parameters.lowconstraint, 
                                    HighConstraint: parameters.highconstraint, } });

        self.SelectedCurrency = ko.computed(function() {
            return AQ(ProfitWiseFunctions.CurrencyCache)
                .first(function (item) {
                    return item.Id == self.CurrencyId();
                });
        });
        
        self.SelectedCurrencyFriendly = ko.computed(function () {
            return self.SelectedCurrency().Abbr + " (" + self.SelectedCurrency().Symbol + ")";
        });

        self.ChangeCurrencySelection = function (model) {
            self.CurrencyId(model.Id);
            ProfitWiseFunctions.PopOverCloseAll();
            self.ChangeCurrencyCallback();
        };

        self.PushState = function(currencyId, amount) {
            self.CurrencyId(currencyId);
            self.Amount(amount);
        }

        self.PullState = function() {
            return {
                CurrencyId: self.CurrencyId(),
                Amount: self.Amount()
            };
        };
        
        // Enter-key Stuff
        self.EnterKeyCallback = function () { };
        self.EscapeKeyCallback = function () { };
        self.ChangeCurrencyCallback = function() {};
        self.EditorLostFocusCallback = function() {};

        self.RegisterEnterKeyCallback = function (callback) {
            self.EnterKeyCallback = callback;
        };

        self.RegisterEscapeKeyCallback = function (callback) {
            self.EscapeKeyCallback = callback;
        };

        self.RegisterChangeCurrencyCallback = function(callback) {
            self.ChangeCurrencyCallback = callback;
        };

        self.RegisterEditorLostFocusCallback = function(callback) {
            self.EditorLostFocusCallback = callback;
        };

        self.InvokeKeyCallback = function (model, event) {
            if (event.keyCode == 27) {
                self.EscapeKeyCallback();
                return false;
            }
            if (event.keyCode == 13) {
                self.EnterKeyCallback();
                return false;
            } else {
                return true;
            }
        };

        self.InvokeEditorLostFocusCallback = function(model, event) {
            self.EditorLostFocusCallback();
        };

        self.SetFocus = function() {
            $("#" + self.Identifier()).focus();
        };

        return self;
    };
</script>
