@using ProfitWise.Data.Model
@using ProfitWise.Web.Models
<!-- Requires KnockoutJS Bootstrap integration plugin Knockstrap -->

<script type="text/html" id="Product-Filter-Widget-Popover">
    <div style="width: 200px; padding-bottom: 15px; height: 100%;">
        <p>Show all products where:</p>

        <select class="form-control" style="float: none;"
                data-bind="options: FilterTypes,
                        value: SelectedFilter,
                        optionsText: function(item) { return item.Name }, 
                        optionsValue: function(item) { return item.Type },
                        optionsCaption: 'Select a filter...'">
        </select>

        <div style="height: 10px;"></div>

        <div data-bind="if: ProductTypeFilterSelected">
            <select class="form-control" style="float: none;" data-bind="value: SelectedProductType, options: ProductTypes">
            </select>
        </div>

        <div data-bind="if: ProductVendorFilterSelected">
            <select class="form-control" style="float: none;" data-bind="value: SelectedVendor, options: ProductVendors"></select>
        </div>

        <div data-bind="if: TaggedWithFilterSelected">
            <div style="height: 45px;">
                <input type="text" maxlength="50" class="form-control" data-bind="value: SelectedTags, hasFocus: true,  valueUpdate: 'afterkeydown',  event: { keypress: TagsFilterKeyPress }" placeholder="E.g.: Blue, Imported, Kids"/>
            </div>

            <div style="font-size: 0.8em;">Enter up to 5 different Product Tags separated by comma</div>
        </div>

        <div data-bind="if: MissingCogsFilterSelected" style="font-size: 0.9em;">
            Hit the "Add Filter" button to include Products missing CoGS in your search
        </div>

        <div style="height: 10px;"></div>

        <div data-bind="visible: SelectedFilter">
            <input type="button" class="btn btn-small btn-default" 
                   value="Add Filter" data-bind="click: AddFilter" />
        </div>
    </div>
</script>

<style>
    .selected-filters .tooltip-inner {
        margin-top: -1px;
    }
    .selected-filters {
        line-height: 16px;
    }
</style>

<script type="text/html" id="Product-Filter-Widget">
    <div class="popover-container" name="product-filter-widget">
        <div class="form-group" style="margin-bottom: 5px;">
            <div class="input-group">
                <div class="input-group-btn">
                    <a class="btn btn-default popover-launcher"
                       type="button"
                       rel="popover"
                       style="line-height: 20px !important;"
                       data-bind="
                                popover: { options: { placement: 'bottom', trigger: 'click',  },  
                                template: 'Product-Filter-Widget-Popover', 
                                data: $data }">
                        Filter Products <i class="glyphicon glyphicon-triangle-bottom"></i>
                    </a>
                </div>

                <input type="text" class="form-control" placeholder="Enter up to 5 search terms for Titles, Vendors or SKU's, separated by comma"
                       data-bind="
                            value: SearchText,
                            valueUpdate: 'afterkeydown', 
                            hasFocus: true,
                            event: { keyup: KeyPressCallback }"/>

                <div class="input-group-addon btn btn-primary" data-bind="click: Callback">
                    Search &nbsp;<i class="glyphicon glyphicon-search"></i>
                </div>
            </div>

            <div style="height: 10px;"></div>
            <div class="input-group selected-filters" data-bind="foreach: SelectedFiltersForSearch" style="min-height: 30px;">

                <div class="filter-tag-container"
                     style="float: left; display: inline-block; margin-right: 5px; margin-bottom: 2px;"
                     data-bind="tooltip: { title: TagDescription, placement: 'bottom' }">

                    <div class="filter-description" data-bind="text: TagDescription">
                    </div>

                    <a class="filter-remove" href="#" data-bind="click: $parent.RemoveFilterFromSearch">
                        &nbsp;
                        &nbsp;
                        <i class="glyphicon glyphicon-remove"></i>
                    </a>
                </div>
            </div>
        </div>
    </div>
</script>

<script type="text/javascript">
    var ProfitWiseWidgets = ProfitWiseWidgets || {};


    ProfitWiseWidgets.ProductFilterTags = function(type, typefriendlyname, value) {
        var self = this;

        self.Type = ko.observable(type);
        self.TypeFriendlyName = ko.observable(typefriendlyname);
        self.Value = ko.observable(value);

        self.TagDescription = ko.computed(
            function () {
                var isword = self.Type() == ProfitWiseWidgets.FilterType.TaggedWith ? " " : " is ";
                
                return (self.Type() == ProfitWiseWidgets.FilterType.MissingCogs)
                    ? "Missing Cogs"
                    : self.TypeFriendlyName() + isword + self.Value();
        });
    };



    ProfitWiseWidgets.FilterType = ProfitWiseWidgets.FilterType || {};
    ProfitWiseWidgets.FilterType.ProductType = "@ProductSearchFilterType.ProductType";
    ProfitWiseWidgets.FilterType.ProductVendor = "@ProductSearchFilterType.ProductVendor";
    ProfitWiseWidgets.FilterType.TaggedWith = "@ProductSearchFilterType.TaggedWith";
    ProfitWiseWidgets.FilterType.MissingCogs = "@ProductSearchFilterType.MissingCogs";



    ProfitWiseWidgets.ProductFilterModel = function (productTypes, productVendors) {
        var self = this;

        self.FilterTypes =
            ko.observableArray([
                { Name:'Type', Type: ProfitWiseWidgets.FilterType.ProductType },
                { Name:'Vendor', Type: ProfitWiseWidgets.FilterType.ProductVendor },
                { Name:'Tagged with', Type: ProfitWiseWidgets.FilterType.TaggedWith },
                { Name:'Missing CoGS', Type: ProfitWiseWidgets.FilterType.MissingCogs },
        ]);        

        self.ProductTypes = ko.observableArray(productTypes);
        self.ProductVendors = ko.observableArray(productVendors);

        self.SearchText = ko.observable("");

        self.SelectedFilter = ko.observable();
        self.SelectedProductType = ko.observable();
        self.SelectedVendor = ko.observable();
        self.SelectedTags = ko.observable();

        self.ProductTypeFilterSelected = ko.computed(function() {
            return self.SelectedFilter() == ProfitWiseWidgets.FilterType.ProductType;
        });
        
        self.ProductVendorFilterSelected = ko.computed(function () {
            return self.SelectedFilter() == ProfitWiseWidgets.FilterType.ProductVendor;
        });

        self.TaggedWithFilterSelected = ko.computed(function () {
            return self.SelectedFilter() == ProfitWiseWidgets.FilterType.TaggedWith;
        });

        self.MissingCogsFilterSelected = ko.computed(function () {
            return self.SelectedFilter() == ProfitWiseWidgets.FilterType.MissingCogs;
        });


        self.SelectedFiltersForSearch = ko.observableArray();
        
        self.TagsFilterKeyPress = function (model, event) {
            if (event.keyCode == 13) {
                self.AddFilter();
                return false;
            } else {
                return true;
            }
        };

        self.AddFilter = function () {

            var selectedFilterType = self.SelectedFilter();
            var filterType = ko.utils.arrayFirst(self.FilterTypes(), function(item) {
                return item.Type == selectedFilterType;
            });
            var selectedFilterName = filterType.Name;
            var selectedFilterValue = null;

            if (self.ProductTypeFilterSelected()) {
                selectedFilterValue = self.SelectedProductType();
            }
            if (self.ProductVendorFilterSelected()) {
                selectedFilterValue = self.SelectedVendor();
            }
            if (self.TaggedWithFilterSelected()) {
                if (!self.SelectedTags() || self.SelectedTags().trim() == "") {
                    self.SelectedFilter(null);
                    ProfitWiseFunctions.PopOverCloseAll();
                    return;
                }
                selectedFilterValue = self.SelectedTags();
                self.SelectedTags("");
            }

            self.SelectedFiltersForSearch.remove(function(item) {
                return item.Type() == selectedFilterType;
            });

            self.SelectedFiltersForSearch.push(
                new ProfitWiseWidgets
                    .ProductFilterTags(selectedFilterType, selectedFilterName, selectedFilterValue));

            self.SelectedFilter(null);
            ProfitWiseFunctions.PopOverCloseAll();
        };

        self.RemoveFilterFromSearch = function (data, event) {
            self.SelectedFiltersForSearch.remove(data);
        };

        self.Callback = function() {
        };

        self.KeyPressCallback = function() {
            if (event.keyCode == 13) {
                self.Callback();
                return false;
            } else {
                return true;
            }
        };

        return self;
    };
</script>

